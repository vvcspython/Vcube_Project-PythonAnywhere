{"version":3,"file":"static/js/4714.94974b36.chunk.js","mappings":"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","sources":["components/dashboard/UploadCodingQuestions.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { Autocomplete, Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, Grid, IconButton, InputLabel, MenuItem, Select, TextField, Typography } from '@mui/material';\nimport { AddRounded, ChangeCircleRounded, CloseRounded, RemoveRounded } from '@mui/icons-material';\nimport { AssessmentContext } from '../api/Assessment';\nimport { DateTime } from '../date-time';\nimport { LocalizationProvider, DateTimePicker } from '@mui/x-date-pickers';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport dayjs from 'dayjs';\nimport 'dayjs/locale/en-gb';\n\nconst UploadCodingQuestions = ({ isOpen, setIsOpen, selectedCourse, selectedBatch, handleShowSnackbar, setIsLoading, editAssignment, editAssignmentData, setEditAssignment, setEditAssignmentData }) => {\n    const { postAssessmentQuestions, patchAssessmentQuestions } = useContext(AssessmentContext);\n    const [level, setLevel] = useState(null);\n    const [title, setTitle] = useState(null);\n    const [question, setQuestion] = useState(null);\n    const [isSql, setIsSql] = useState(null);\n    const [selectedMonth, setSelectedMonth] = useState(null);\n    const [assignmentType, setAssignmentType] = useState(null);\n    const [selectType, setSelectType] = useState(true);\n    const [assignmentLength, setAssignmentLength] = useState(5);\n    const [selectedDateTime, setSelectedDateTime] = useState(dayjs());\n    const [testCases, setTestCases] = useState(\n        Array.from({ length: assignmentLength }, () => ({ inputs: [], expected: [] }))\n    );\n    const [examples, setExamples] = useState(\n        Array.from({ length: 2 }, () => ({ input: [], output: [], explanation: [] }))\n    );\n\n    useEffect(() => {\n        setTestCases((prevTestCases) => {\n            const newTestCases = Array.from({ length: assignmentLength }, (_, index) => {\n                return prevTestCases[index] || { inputs: [], expected: [] };\n            });\n            return newTestCases;\n        });\n    }, [assignmentLength]);\n\n    useEffect(()=>{\n        if(editAssignment && editAssignmentData){\n            setQuestion(JSON.parse(editAssignmentData[0].Question).Question)\n            setTitle(JSON.parse(editAssignmentData[0].Question).Title)\n            setIsSql(JSON.parse(editAssignmentData[0].Question).SQL)\n            setLevel(editAssignmentData[0].Level)\n            setSelectedMonth(JSON.parse(editAssignmentData[0].Question).Month)\n            setTestCases(JSON.parse(editAssignmentData[0].Test_Cases))\n            setExamples(JSON.parse(editAssignmentData[0].Examples))\n            setAssignmentType(editAssignmentData[0].WeeklyAssignment === 'No' ? 'Dialy Assignment' : 'Weekly Assignment')\n            if(assignmentType === 'Weekly Assignment')setSelectedDateTime(dayjs(editAssignmentData[0].WeeklyAssignment, 'DD-MMM-YYYY HH:mm:ss'))\n        }\n    },[isOpen, editAssignment, editAssignmentData])\n\n    const handleInputChange = (index, event, newValue) => {\n        const newPairs = [...testCases];\n        newPairs[index].inputs = newValue;\n        setTestCases(newPairs);\n    };\n\n    const handleOutputChange = (index, event, newValue) => {\n        const newPairs = [...testCases];\n        newPairs[index].expected = newValue;\n        setTestCases(newPairs);\n    };\n\n    const handleInput = (idx, event, newValue) => {\n        const newPairs = [...examples];\n        newPairs[idx].input = newValue;\n        setExamples(newPairs);\n    }\n\n    const handleOutput = (idx, event, newValue) => {\n        const newPairs = [...examples];\n        newPairs[idx].output = newValue;\n        setExamples(newPairs);\n    }\n\n    const handleExplanation = (idx, event, newValue) => {\n        const newPairs = [...examples];\n        newPairs[idx].explanation = newValue;\n        setExamples(newPairs);\n    }\n\n\n    const handleSubmit = () =>{\n        const hasEmptyArrays = testCases.some(({ inputs, expected }) =>\n            inputs.length === 0 || expected.length === 0\n        );\n        const has_Empty_Arrays = examples.some(({ input, output, explanation }) =>\n            input.length === 0 || output.length === 0 || explanation.length === 0\n        );\n        if (!level || !title || !question || hasEmptyArrays || has_Empty_Arrays || !isSql || (assignmentType === 'Weekly Assignment' ? !selectedDateTime : !selectedMonth)){\n            handleShowSnackbar('error','All fields are required. Please fill them out.');\n            return;\n        }\n        setIsLoading(true);\n        submitAssessment();\n    }\n\n    const submitAssessment = async() => {\n        const data = {\n            Course : selectedCourse,\n            BatchName : selectedBatch,\n            Question : JSON.stringify({Title : title, Question : question, SQL : isSql, Month : assignmentType === 'Weekly Assignment' ? 'N/A' : selectedMonth}),\n            Test_Cases : JSON.stringify(testCases),\n            Examples : JSON.stringify(examples),\n            Level : level,\n            WeeklyAssignment : assignmentType === 'Weekly Assignment' ? formatDateTime(selectedDateTime) : 'No'\n        }\n        if(editAssignment && editAssignmentData)data['id'] = editAssignmentData[0].id;\n        const res = editAssignment && editAssignmentData ? await patchAssessmentQuestions(data) : await postAssessmentQuestions(data);\n        if (res && res.message){\n            handleShowSnackbar('error',res.message);\n        }else if(res){\n            handleShowSnackbar('success',`Assessment Question has been ${editAssignment && editAssignmentData ? 'updated' : 'uploaded'} successfully.`);\n            handleClose();\n        }\n        setIsLoading(false);\n    };\n\n    const handleClose = () => {\n        setTestCases(Array.from({ length: 5 }, () => ({ inputs: [], expected: [] })));\n        setExamples(Array.from({ length: 2 }, () => ({ input: [], output: [], explanation: [] })));\n        setTitle(null);\n        setLevel(null);\n        setQuestion(null);\n        setQuestion(null);\n        setIsOpen(false);\n        setIsSql(null);\n        setEditAssignment(false);\n        setEditAssignmentData(null);\n        setSelectType(true);\n        setAssignmentType(null);\n        setAssignmentLength(5);\n    }\n\n    const handleDateChange = (newValue) => {\n      setSelectedDateTime(newValue);\n    };\n\n    const formatDateTime = (date) => {\n        return date.format('DD-MMM-YYYY HH:mm:00');\n    };\n\n  return (\n    <>\n    <Dialog fullScreen open={isOpen} sx={{zIndex : '700'}}>\n        <Box className='flex items-center justify-between pl-5 pr-5'>\n            <Typography variant='h5'>Upload {assignmentType}{!editAssignment && <IconButton onClick={()=>{setAssignmentType(null);setSelectType(true)}}><ChangeCircleRounded color='primary' /></IconButton>}</Typography>\n            <img src='/images/V-Cube-Logo.png' alt='' width='7%' className='absolute left-[46.50%]'/>\n            <IconButton className='top-2 right-0' onClick={handleClose}><CloseRounded sx={{fontSize : '35px'}} /></IconButton>\n        </Box>\n        <DialogTitle className='flex items-center justify-between'>\n            {assignmentType === 'Weekly Assignment' ?\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <DateTimePicker\n                label=\"Pick Date and Time\"\n                value={selectedDateTime}\n                onChange={handleDateChange}\n                renderInput={(params) => <TextField {...params} />}\n                ampm={false}\n            />\n            </LocalizationProvider> \n            :\n            <FormControl className='w-52' variant='standard'>\n                <InputLabel shrink={selectedMonth} >Select Month</InputLabel>\n                <Select\n                    value={selectedMonth}\n                    onChange={(e)=>setSelectedMonth(e.target.value)}\n                    >\n                    {[1,2,3,4,5,6,7,8].map((month)=><MenuItem value={`Month ${month}`}>Month {month}</MenuItem>)}\n                </Select>\n            </FormControl>}\n            <Box className='flex items-center justify-between w-52'>\n                <Typography>SQL? : </Typography>\n                <Button onClick={()=>setIsSql('Yes')} variant={isSql === 'Yes' ? 'contained' : 'outlined'}>Yes</Button>\n                <Button onClick={()=>setIsSql('No')} variant={isSql === 'No' ? 'contained' : 'outlined'}>No</Button>\n            </Box>\n            <Box className='flex items-center justify-between w-[30%]'>\n                <Typography>Select Level : </Typography>\n                <Button color='success' variant={level === 'Easy' ? 'contained' : 'outlined'} onClick={()=>setLevel('Easy')}>Easy</Button>\n                <Button color='warning' variant={level === 'Medium' ? 'contained' : 'outlined'} onClick={()=>setLevel('Medium')}>Medium</Button>\n                <Button color='error' variant={level === 'Hard' ? 'contained' : 'outlined'} onClick={()=>setLevel('Hard')}>Hard</Button>\n            </Box>\n        </DialogTitle>\n        <DialogContent className='max-h-[40rem] overflow-y-auto' sx={{scrollbarWidth : 'thin'}}>\n            <Box className='pt-3 flex flex-col items-center justify-start h-80'>\n                <TextField className='w-full h-[5.50rem]' value={title} inputProps={{ maxLength : 40 }} onChange={(e)=>setTitle(e.target.value)}\n                  InputLabelProps={{ shrink: title ? true : false }} label='Question Title'/>\n                <TextField multiline rows={7} onChange={(e)=>setQuestion(e.target.value)} value={question}\n                 InputLabelProps={{ shrink: question ? true : false }} className='w-full' label='Your Question Here...'/>\n            </Box>\n            <Box className='w-full flex items-center justify-between'>\n                {[0,1].map(idx=><Box className='w-[48%]'>\n                    <Typography sx={{fontWeight : 'bold'}} variant='h6'>Example {idx + 1}</Typography>\n                    <Typography sx={{fontWeight : 'bold', margin : '10px 0'}}>Input</Typography>\n                    <Autocomplete\n                        sx={{margin : '15px 0'}}\n                        multiple\n                        freeSolo\n                        value={examples[idx].input}\n                        options={[]}\n                        onChange={(event, newValue) => handleInput(idx, event, newValue)}\n                        renderInput={(params) => (\n                            <TextField\n                                multiple\n                                {...params}\n                                variant=\"outlined\"\n                                label=\"Input\"\n                            />\n                        )}\n                    />\n                    <Typography sx={{fontWeight : 'bold', margin : '10px 0'}}>Output</Typography>\n                    <Autocomplete\n                        sx={{margin : '15px 0'}}\n                        multiple\n                        freeSolo\n                        value={examples[idx].output}\n                        options={[]}\n                        onChange={(event, newValue) => handleOutput(idx, event, newValue)}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                variant=\"outlined\"\n                                label=\"Output\"\n                            />\n                        )}\n                    />\n                    <Typography sx={{fontWeight : 'bold', margin : '10px 0'}}>Explanation</Typography>\n                    <Autocomplete\n                        sx={{margin : '15px 0'}}\n                        multiple\n                        freeSolo\n                        value={examples[idx].explanation}\n                        options={[]}\n                        onChange={(event, newValue) => handleExplanation(idx, event, newValue)}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                variant=\"outlined\"\n                                label=\"Explanation\"\n                            />\n                        )}\n                    />\n                </Box>)}\n            </Box>\n            <Typography variant='h5' sx={{ fontWeight: 'bold', margin: '50px 0 20px 0' }}>\n                Test Cases\n            </Typography>\n            <Grid container spacing={3}>\n                {testCases.map((pair, index) => (\n                    <Grid item xs={12} sm={6} key={index}>\n                        <Typography variant='h6' sx={{ fontWeight: 'bold' }}>\n                            TestCase {index + 1}\n                        </Typography>\n                        <Autocomplete\n                            sx={{margin : '15px 0'}}\n                            multiple\n                            freeSolo\n                            value={pair.inputs}\n                            options={[]}\n                            onChange={(event, newValue) => handleInputChange(index, event, newValue)}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    variant=\"outlined\"\n                                    label={`Input ${index + 1}`}\n                                />\n                            )}\n                        />\n                        <Autocomplete\n                            multiple\n                            freeSolo\n                            value={pair.expected}\n                            options={[]}\n                            onChange={(event, newValue) => handleOutputChange(index, event, newValue)}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    variant=\"outlined\"\n                                    label={`Output ${index + 1}`}\n                                />\n                            )}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n        <Box className='w-full flex items-center justify-end mt-5'>\n            <Button startIcon={<RemoveRounded/>} variant='outlined' sx={{marginRight : '15px'}} onClick={()=> assignmentLength > 5 ? setAssignmentLength((pre)=>pre -= 1) : handleShowSnackbar('warning','You must maintain at least 5 test cases; reduction below this limit is not allowed.')}>Remove Test Case</Button>\n            <Button startIcon={<AddRounded/>} variant='outlined' onClick={()=>setAssignmentLength((pre)=>pre += 1)}>Add Test Case</Button>\n        </Box>\n        <Button variant='contained' sx={{width : '50%', margin : '3% 0 0 25%', height : '40px'}}\n            onClick={handleSubmit}>Submit</Button>\n        </DialogContent>\n    </Dialog>\n\n    <Dialog open={isOpen && selectType && !editAssignment} sx={{zIndex : '710'}}>\n        <DialogTitle>Choose Assignment</DialogTitle>\n        <DialogContent className='w-[28rem]'>\n            <Box className='w-full flex items-center justify-between'>\n                <Button variant={assignmentType === 'Dialy Assignment' ? 'contained' : 'outlined'} onClick={()=>setAssignmentType('Dialy Assignment')}>Dialy Assignment</Button>\n                <Typography>or</Typography>\n                <Button variant={assignmentType === 'Weekly Assignment' ? 'contained' : 'outlined'} onClick={()=>setAssignmentType('Weekly Assignment')}>Weekly Assignment</Button>\n            </Box>\n        </DialogContent>\n        <DialogActions>\n            <Button variant='outlined' onClick={handleClose}>Close</Button>\n            <Button variant='contained' onClick={()=>setSelectType(false)}>Continue</Button>\n        </DialogActions>\n    </Dialog>\n    </>\n  )\n}\n\nexport default UploadCodingQuestions;"],"names":["_ref","isOpen","setIsOpen","selectedCourse","selectedBatch","handleShowSnackbar","setIsLoading","editAssignment","editAssignmentData","setEditAssignment","setEditAssignmentData","postAssessmentQuestions","patchAssessmentQuestions","useContext","AssessmentContext","level","setLevel","useState","title","setTitle","question","setQuestion","isSql","setIsSql","selectedMonth","setSelectedMonth","assignmentType","setAssignmentType","selectType","setSelectType","assignmentLength","setAssignmentLength","selectedDateTime","setSelectedDateTime","dayjs","testCases","setTestCases","Array","from","length","inputs","expected","examples","setExamples","input","output","explanation","useEffect","prevTestCases","_","index","JSON","parse","Question","Title","SQL","Level","Month","Test_Cases","Examples","WeeklyAssignment","submitAssessment","async","data","Course","BatchName","stringify","formatDateTime","id","res","message","handleClose","date","format","_jsxs","_Fragment","children","Dialog","fullScreen","open","sx","zIndex","Box","className","Typography","variant","_jsx","IconButton","onClick","ChangeCircleRounded","color","src","alt","width","CloseRounded","fontSize","DialogTitle","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","label","value","onChange","newValue","renderInput","params","TextField","ampm","FormControl","InputLabel","shrink","Select","e","target","map","month","MenuItem","Button","DialogContent","scrollbarWidth","inputProps","maxLength","InputLabelProps","multiline","rows","idx","fontWeight","margin","Autocomplete","multiple","freeSolo","options","event","handleInput","newPairs","handleOutput","handleExplanation","Grid","container","spacing","pair","item","xs","sm","handleInputChange","handleOutputChange","startIcon","RemoveRounded","marginRight","pre","AddRounded","height","handleSubmit","hasEmptyArrays","some","_ref2","has_Empty_Arrays","_ref3","DialogActions"],"sourceRoot":""}