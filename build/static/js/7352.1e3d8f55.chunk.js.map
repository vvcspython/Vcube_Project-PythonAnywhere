{"version":3,"file":"static/js/7352.1e3d8f55.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/SecurityRounded.js","components/dashboard/SetDrivePin.js","components/dashboard/DrivePin.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m11.19 1.36-7 3.11C3.47 4.79 3 5.51 3 6.3V11c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V6.3c0-.79-.47-1.51-1.19-1.83l-7-3.11c-.51-.23-1.11-.23-1.62 0M12 11.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11z\"\n}), 'SecurityRounded');","import React from 'react';\nimport { Box, TextField, Typography } from '@mui/material';\n\nconst SetDrivePin = ({ newPin, setNewPin, confirmPin, setConfirmPin, otp, setOTP, password, setpassword }) => {\n\n    const handleChange = (e, index, currentInput) => {\n        const value = e.target.value;\n\n        if (/^\\d?$/.test(value)) {\n        const newValue = currentInput === 'pin' ? [...newPin] : currentInput === 'forgot' ? [...confirmPin] : [...otp];\n        newValue[index] = value;\n\n        if (currentInput === 'pin') {\n            setNewPin(newValue);\n        } else if (currentInput === 'forgot') {\n            setConfirmPin(newValue);\n        } else {\n            setOTP(newValue);\n        }\n\n        if (value && index < 5) {\n            setTimeout(() => {\n            document.getElementById(`${currentInput}-input-${index + 1}`).focus();\n            }, 0);\n        }\n        }\n    };\n\n    const handleKeyDown = (e, index, currentInput) => {\n    if (e.key === 'Backspace' && (currentInput === 'pin' ? newPin[index] : currentInput === 'forgot' ? confirmPin[index] : otp[index]) === '' && index > 0) {\n        setTimeout(() => {\n        document.getElementById(`${currentInput}-input-${index - 1}`).focus();\n        }, 0);\n    }\n    };\n\n\n  return (\n    <Box className='w-full h-full'>\n        <Typography className='text-center'>Enter a New PIN.<br/>Please keep your PIN safe and secure to protect your account.</Typography>\n        <TextField variant='standard' type='password' label='Your Account Password' className='h-20 w-[70%]' \n            sx={{margin : '5% 0 0 15%','& .MuiInputBase-input': {fontSize: '24px'},'& .MuiInputLabel-root': {fontSize: '20px',},}}\n            value={password} onChange={(e)=>setpassword(e.target.value)}\n        />\n    <Box className='w-full h-[65%] flex flex-col items-center justify-evenly'>\n      {['pin', 'forgot', 'otp'].map((name, index) => (\n        <Box key={name} className='w-[70%] flex flex-col items-center justify-evenly'>\n            <Typography className='w-full'>{index === 0 ? 'New Pin' : index === 1 ? 'Confirm Pin' : 'Enter OTP'}</Typography>\n            <Box className='w-full flex items-center justify-between'>\n            {[0, 1, 2, 3, 4, 5].map((no) => (\n                <TextField\n                    variant='standard'\n                    key={no}\n                    id={`${name}-input-${no}`}\n                    onChange={(e) => handleChange(e, no, name)}\n                    onKeyDown={(e) => handleKeyDown(e, no, name)}\n                    type='password'\n                    value={name === 'pin' ? newPin[no] : name === 'forgot' ? confirmPin[no] : otp[no]}\n                    inputProps={{ maxLength: 1 }}\n                    InputProps={{ disableUnderline : true }}\n                    className='w-10'\n                    sx={{paddingLeft : '1rem', borderBottom : 'solid 1px grey',\n                        '& .MuiInputBase-input': {fontSize: '24px',} \n                    }}\n                />\n            ))}\n            </Box>\n        </Box>\n    ))}\n    </Box>\n    </Box>\n  );\n};\n\nexport default SetDrivePin;\n","import React, { useContext, useState } from 'react';\nimport { Box, Button, Dialog, DialogActions, DialogContent, IconButton, TextField, Typography } from '@mui/material';\nimport { CloseRounded, SecurityRounded } from '@mui/icons-material';\nimport SetDrivePin from './SetDrivePin';\nimport { generateRandomNumber, UserDetails } from '../UserDetails';\nimport { MailContext } from '../api/SendMail';\nimport { UsersAuthContext } from '../api/UsersAuth';\n\nconst DrivePin = ({ isOpen, setIsOpen, handleShowSnackbar, setIsLoading, setIsValidated }) => {\n    const { sendEmail } = useContext(MailContext);\n    const { createUserDrivePassword, getUserDriveData, removeUserLoginData } = useContext(UsersAuthContext);\n    const [pin, setPin] = useState(Array(6).fill(''));\n    const [newPin, setNewPin] = useState(Array(6).fill(''));\n    const [confirmPin, setConfirmPin] = useState(Array(6).fill(''));\n    const [otp, setOTP] = useState(Array(6).fill(''));\n    const [password, setpassword] = useState(null);\n    const [isSubmit, setIsSubmit] = useState(false);\n    const [forgot, setForgot] = useState(false);\n    const user = UserDetails('All');\n\n    const handleChange = (e, index) => {\n        const value = e.target.value;\n\n        if (/^\\d?$/.test(value)) {\n            const newPin = [...pin];\n            newPin[index] = value;\n            setPin(newPin);\n\n            if (value && index < pin.length - 1) {\n            document.getElementById(`pin-input-${index + 1}`).focus();\n            }\n        }\n    };\n\n    const handleKeyDown = (e, index) => {\n        if (e.key === 'Backspace' && !pin[index] && index > 0) {\n            document.getElementById(`pin-input-${index - 1}`).focus();\n        }\n    };\n\n    const send_Mail = async () => {\n        setIsLoading(true);\n        const mail = await sendEmail(' ', user.Email, 'OTP for Creating Your Drive Password', user.Username, 'OTP', `${user.Username}~${user.Email}`);\n        setIsLoading(false);\n        if (mail === true){\n            handleShowSnackbar('success','OTP has been successfully sent to your Email address. Check spam folder too if not found.');\n            setForgot(true);\n        }else{\n            handleShowSnackbar('error','Something went wrong. Please try again later.');\n            setIsOpen(false);\n        }\n    };\n\n        \n    const checkFields = () => {\n        if(!password)return false;\n        if(!newPin.every(pin=>pin.length > 0))return false;\n        if(!confirmPin.every(pin=>pin.length > 0))return false;\n        if(newPin.reduce((pre, pin)=>pre + pin) !== confirmPin.reduce((pre, pin)=>pre + pin))return false;\n        if(!otp.every(otp=>otp.length > 0))return false;\n        return true;\n    }\n\n    const resetPin = async () => {\n        setIsLoading(true);\n        if(checkFields()){\n            const data = {\n                Email : user.Email,\n                Password : password,\n                DrivePassword : newPin.reduce((pre, pin)=>pre + pin),\n                User_Id : `${user.Username}~${user.Email}`,\n                OTP : otp.reduce((pre, otp)=>pre + otp)\n            }\n            const res = await createUserDrivePassword(user.Course, user.Username, data);\n            if (res === true){\n                handleShowSnackbar('success','Drive registration completed successfully. You are now registered for drive access!');\n                handleClear();\n            }else if(res && res.message){\n                if(res.response.status === 406){\n                    handleShowSnackbar('error','Invalid OTP.');\n                }else if(res.response.status === 403){\n                    handleShowSnackbar('error','Access Denied.');\n                }else if(res.response.status === 401){\n                    handleShowSnackbar('error','Invalid Password.');\n                }else{\n                    handleShowSnackbar('error','Something went wrong. Please try again later.');\n                }\n            }\n        }else{\n            newPin.reduce((pre, pin)=>pre + pin) !== confirmPin.reduce((pre, pin)=>pre + pin) ?\n            handleShowSnackbar('error',\"New PIN and Confirm PIN doesn't match.\") :\n            handleShowSnackbar('error','All fields must be completed. Please check and fill them.');\n        }\n        setIsLoading(false);\n    }\n\n    const validateUser = async () => {\n        setIsSubmit(true);\n        if(!pin.every(pin=>pin.length > 0))return;\n        setIsSubmit(false);\n        setIsLoading(true);\n        const data = {\n            Email : user.Email,\n            DrivePassword : generateRandomNumber(pin.reduce((pre, pin)=>pre + pin))\n        }\n        const res = await getUserDriveData(user.Course, user.Username, data, 'Validate');\n        setIsLoading(false);\n        if (res === true){\n            setIsValidated(true);\n            handleShowSnackbar('success','Verification successful. Drive access granted.');\n            setTimeout(()=>{handleShowSnackbar('success', `Dear ${user.Username}. Welcome to your drive!`);},1000);\n        }else if(res && res.message){\n            if(res.response.status === 403){\n                handleShowSnackbar('error','Verification failed. Access Denied.');\n            }else if(res.response.status === 401){\n                handleShowSnackbar('error','Verification failed. Invalid Pin.');\n            }else{\n                handleShowSnackbar('error',`Verification failed. ${res.message}`);\n            }\n            handleClear();\n            setIsOpen(false);\n        }\n    }\n\n    const handleClear = () => {\n        setpassword(null);\n        setIsSubmit(false);\n        setForgot(false);\n        setPin(Array(6).fill(''));\n        setNewPin(Array(6).fill(''));\n        setConfirmPin(Array(6).fill(''));\n        setOTP(Array(6).fill(''));\n    }\n\n\n  return (\n    <Dialog open={isOpen} sx={{zIndex : '700'}} onClose={()=>{handleClear();setIsOpen(false)}}>\n        <img src='/images/V-Cube-Logo.png' alt='' width='15%' className='ml-[42.5%]' />\n        <IconButton sx={{position : 'absolute'}} className='top-1 right-1' onClick={()=>{handleClear();setIsOpen(false)}}>\n            <CloseRounded fontSize='large' />\n        </IconButton>\n        <DialogContent className={`w-full ${forgot ? 'h-[30rem]' : 'h-[20rem]'} flex flex-col items-center justify-start`}>\n            {!forgot ? <Box className='w-full h-full flex flex-col items-center justify-start'>\n                <SecurityRounded sx={{fontSize : '50px'}} color='primary' />\n                <Typography variant='h5' sx={{margin : '20px 0'}}>Hi {user.Username}</Typography>\n                {user.Drive === 'Not Registered' ? \n                <>\n                    <Typography className='text-center' variant='h6'>Registration not found.</Typography><br/>\n                    <Typography>Please register to use the drive services.</Typography>\n                </>\n                : \n                <>\n                <Typography sx={{margin : '0 0 20px 0'}}>Please enter the 6-digit PIN to access your drive.</Typography>\n                <Box className='w-[70%] flex items-center justify-evenly'>\n                    {pin.map((_,idx)=>\n                        <TextField \n                            key={idx}\n                            id={`pin-input-${idx}`}\n                            value={pin[idx]}\n                            onChange={(e) => handleChange(e, idx)}\n                            onKeyDown={(e) => handleKeyDown(e, idx)}\n                            type='password'\n                            className='w-[2.19rem] h-16'\n                            sx={{fontSize : '50px','& .MuiInputBase-input': {fontSize: '24px', height : '1.50rem'},}}\n                            error={isSubmit && !pin.every((pin)=>pin.length > 0)}\n                            inputProps={{ maxLength : 1 }}\n                        />\n                    )}\n                </Box>\n                </>}\n                <Typography sx={{margin : '20px 0'}} color='primary' className='cursor-pointer hover:underline'\n                    onClick={send_Mail}>{user.Drive === 'Not Registered' ? 'Register' : 'Forgot PIN?'}\n                </Typography>\n            </Box>\n            : \n            <SetDrivePin newPin={newPin} setNewPin={setNewPin} confirmPin={confirmPin} setConfirmPin={setConfirmPin} \n                        otp={otp} setOTP={setOTP} password={password} setpassword={setpassword} />}\n        </DialogContent>\n        <DialogActions>\n            <Button variant='outlined'onClick={()=>{handleClear();!forgot && setIsOpen(false)}}>Cancel</Button>\n            <Button variant='contained' onClick={()=>{forgot ? resetPin() : validateUser()}}>Submit</Button>\n        </DialogActions>\n        {/* <DialogContent className='flex flex-col items-center justify-evenly'>\n            <img src='/images/developer-mode.gif' alt='' className='w-[80%] h-[80%]' />\n            <Typography variant='h6' color='grey' >Our drive is currently in development. We'll return shortly!</Typography>\n        </DialogContent> */}\n    </Dialog>\n  )\n}\n\nexport default DrivePin;"],"names":["createSvgIcon","_jsx","d","_ref","newPin","setNewPin","confirmPin","setConfirmPin","otp","setOTP","password","setpassword","_jsxs","Box","className","children","Typography","TextField","variant","type","label","sx","margin","fontSize","value","onChange","e","target","map","name","index","no","id","handleChange","currentInput","test","newValue","setTimeout","document","getElementById","focus","onKeyDown","handleKeyDown","key","inputProps","maxLength","InputProps","disableUnderline","paddingLeft","borderBottom","isOpen","setIsOpen","handleShowSnackbar","setIsLoading","setIsValidated","sendEmail","useContext","MailContext","createUserDrivePassword","getUserDriveData","removeUserLoginData","UsersAuthContext","pin","setPin","useState","Array","fill","isSubmit","setIsSubmit","forgot","setForgot","user","UserDetails","resetPin","async","every","length","reduce","pre","data","Email","Password","DrivePassword","User_Id","Username","OTP","res","Course","handleClear","message","response","status","Dialog","open","zIndex","onClose","src","alt","width","IconButton","position","onClick","CloseRounded","DialogContent","SetDrivePin","SecurityRounded","color","Drive","_Fragment","_","idx","height","error","mail","DialogActions","Button","generateRandomNumber","validateUser"],"sourceRoot":""}