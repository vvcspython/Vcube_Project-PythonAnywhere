{"version":3,"file":"static/js/2426.a66d9b9c.chunk.js","mappings":"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","sources":["components/Placements/index.js","components/api/LoginCheck.js","components/dashboard/Drive.js","../node_modules/@mui/icons-material/esm/CloudRounded.js","../node_modules/@mui/icons-material/esm/FlipCameraAndroidRounded.js","../node_modules/@mui/icons-material/esm/HomeRounded.js","../node_modules/@mui/icons-material/esm/NotificationsRounded.js","../node_modules/@mui/icons-material/esm/ThreePRounded.js"],"sourcesContent":["import React, { useState, useEffect, useContext, Suspense, lazy } from 'react';\nimport { Badge, Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, IconButton, Tooltip, Typography } from '@mui/material';\nimport { CloseRounded, CloudRounded, FlipCameraAndroidRounded, HomeRounded, MenuRounded, NotificationsRounded, ReportProblemRounded, ThreePRounded } from '@mui/icons-material';\nimport { BatchContext } from '../api/batch';\nimport { CourseContext } from '../api/Course';\nimport { enqueueSnackbar, closeSnackbar } from 'notistack';\nimport LoadingSkeleton from '../skeleton';\nimport { useAuth } from '../api/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { UserDetails } from '../UserDetails';\nimport { UseUserAuthentication } from '../api/LoginCheck';\nimport ExpiredPage from '../ExpiredPage';\nimport LoadingSkeletonAlternate from '../LoadingSkeletonAlternate';\nimport { UserGoogleContext } from '../api/Google';\nimport { UsersAuthContext } from '../api/UsersAuth';\nimport Drive from '../dashboard/Drive';\nimport ReportDialog from '../ReportDialog';\n\nconst OverView = lazy(() => import('./OverView'));\nconst SelectOptions = lazy(() => import('./OptionsBar'));\nconst StudentDetails = lazy(() => import('./StudentDetails'));\nconst DashboardDrawer = lazy(() => import('../dashboard/DashboardDrawer'));\nconst JobAnnoucement = lazy(() => import('./JobAnnoucement'));\nconst ViewJobAnnouncements = lazy(() => import('./ViewJobAnnouncements'));\nconst MessageToStudents = lazy(() => import('../dashboard/MessageToStudents'));\nconst SentMessages = lazy(() => import('../dashboard/SentMessages'));\nconst StudentsFeedback = lazy(() => import('./StudentsFeedback'));\nconst AdminNotifications = lazy(() => import('./AdminNotifications'));\nconst StudentMessages = lazy(() => import('./StudentMessages'));\nconst UserSettings = lazy(() => import('../settings'));\n\nconst PlacementsDashboard = () => {\n    const { fetchBatchData } = useContext(BatchContext);\n    const { fetchCourse } = useContext(CourseContext);\n    const { userGoogleLogout } = useContext(UserGoogleContext);\n    const { logout, isPlacementsAuthenticated } = useAuth();\n    const { checkUserAuth } = useContext(UsersAuthContext);\n    const navigate = useNavigate();\n    const isUser = UserDetails('User');\n    const userCourse = UserDetails('Course');\n    const [openDrawer, setOpenDrawer] = useState(false);\n    const [selectedBatch, setSelectedBatch] = useState(null);\n    const [selectedCourse, setSelectedCourse] = useState(null);\n    const [batchData, setBatchData] = useState([]);\n    const [courseData, setCourseData] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [shortLoading, setShortLoading] = useState(false);\n    const [postJob, setPostJob] = useState(false);\n    const [postedJobs, setPostedJob] = useState(false);\n    const [confirmLogout, setConfirmLogout] = useState(false);\n    const [sendMsgToStd, setSendMsgToStd] = useState(false);\n    const [showSendMsg, setShowSendMsg] = useState(false);\n    const [settingsOpen, setSettingsOpen] = useState(false);\n    const [studentsFeedback, setStudentsFeedback] = useState(false);\n    const [batchNotif, setBatchNotif] = useState(false);\n    const [notifLen, setNotifLen] = useState(0);\n    const [stdMessages, setStdMessages] = useState(false);\n    const [stdMsgLen, setStdMsgLen] = useState(0);\n    const [isUserAuthenticated, setIsUserAuthenticated] = useState(false);\n    const [openDrive, setOpenDrive] = useState(false);\n    const [reportIssue, setReportIssue] = useState(false);\n    const [isAuthChecked, setIsAuthChecked] = useState(false);\n    const [refresh, setRefresh] = useState(false);\n\n    const handleShowSnackbar = (variant, message) => {\n        enqueueSnackbar(message, {\n            variant: variant,\n            anchorOrigin: { vertical: 'top', horizontal: 'right' },\n            action: (key) => (\n                <IconButton onClick={() => closeSnackbar(key)} color=\"inherit\">\n                    <CloseRounded />\n                </IconButton>\n            ), \n        });\n    };\n\n    const Check_Auth = async () => {\n        await UseUserAuthentication(checkUserAuth, setIsUserAuthenticated);\n        !isAuthChecked && setIsAuthChecked(true);\n    }\n\n    const fetchData = async () => {\n        try {\n            const batch_data = await fetchBatchData();\n            const course_Data = await fetchCourse();\n            if((batch_data && batch_data.message) || (course_Data && course_Data.message)) {\n                handleShowSnackbar('error', batch_data.message || course_Data.message);\n            } else {\n                setBatchData(batch_data);\n                setCourseData(course_Data);\n            }\n        } catch (error) {\n            handleShowSnackbar('error', 'Failed to fetch data.');\n        }\n    };\n\n    useEffect(() => {\n        Check_Auth();\n        fetchData();\n    }, [selectedBatch, selectedCourse]);\n\n    useEffect(() => {\n        if (isLoading) {\n            setTimeout(() => setIsLoading(false), 3000);\n        }\n        Check_Auth();\n    }, [isLoading]);\n\n    useEffect(() => {\n        if (shortLoading) {\n            setTimeout(() => setShortLoading(false), 1000);\n        }\n        Check_Auth();\n    }, [shortLoading]);\n\n    const handleLogout = () => {\n        setIsLoading(true);\n        setTimeout(() => {\n            userGoogleLogout();\n            logout();\n            navigate('/');\n        }, 500);\n    };\n\n    const refreshData = async () => {\n        setRefresh(!refresh);\n        setIsLoading(true);\n        await Check_Auth();\n        await fetchData();\n        setIsLoading(false);\n    }\n\n    if(isAuthChecked){\n    if (isUserAuthenticated && isPlacementsAuthenticated){\n        return (\n            <Box className='w-screen h-screen bg-slate-100'>\n                <Box className=\"w-full h-16 flex items-center justify-between pl-5 pr-5 bg-[#1976d2]\" sx={{ boxShadow: '0 0 15px rgba(0,0,0,0.5)' }}>\n                    <Typography className='flex items-center' variant='h6' sx={{ color: 'white' }}>\n                        <HomeRounded sx={{ fontSize: '25px', marginRight: '10px', color: 'white' }} />\n                        Placement's Dashboard\n                    </Typography>\n                    <Box className='w-1/5 h-full flex flex-row-reverse items-center justify-between'>\n                    <Tooltip title='Menu' arrow>\n                    <IconButton onClick={() => setOpenDrawer(true)}>\n                        <Box className='rounded-full flex items-center justify-center'>\n                        <MenuRounded fontSize='large' sx={{color : 'white'}} />\n                        </Box>\n                    </IconButton>\n                    </Tooltip>\n                    <Tooltip title='VCube Drive' arrow>\n                    <IconButton onClick={() => setOpenDrive(true)}>\n                        <CloudRounded sx={{ fontSize: '28px', color: 'white' }} />\n                    </IconButton>\n                    </Tooltip>\n                    <Tooltip title='Student Messages' arrow>\n                        <IconButton onClick={() => setStdMessages(true)}>\n                            <Badge badgeContent={stdMsgLen} color='error' max={99}>\n                                <ThreePRounded sx={{ fontSize: '28px', color: 'white' }} />\n                            </Badge>\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title='Report an Issue' arrow>\n                        <IconButton onClick={() => setReportIssue(true)}>\n                                <ReportProblemRounded sx={{ fontSize: '28px', color: 'white' }} />\n                        </IconButton>\n                    </Tooltip>\n                    {isUser === 'Super Admin' ? <Tooltip title='Navigate to Dashboard' arrow>\n                        <IconButton onClick={() => navigate(`/vcube/dashboard/${sessionStorage.getItem('UniqueURL').substring(0,30)}`)} \n                            >\n                        <Badge badgeContent={stdMsgLen} color='error' max={99}>\n                            <FlipCameraAndroidRounded sx={{ fontSize: '28px', color: 'white' }} />\n                        </Badge>\n                        </IconButton>\n                    </Tooltip> \n                    :\n                    <Tooltip title='Your Notifications' arrow>\n                        <IconButton>\n                            <Badge badgeContent={notifLen} color='error' max={99} onClick={() => setBatchNotif(true)}>\n                                <NotificationsRounded sx={{ fontSize: '28px', color: 'white' }} />\n                            </Badge>\n                        </IconButton>\n                    </Tooltip>}               \n                    </Box>\n                </Box>\n\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <OverView selectedBatch={selectedBatch} selectedCourse={selectedCourse} handleShowSnackbar={handleShowSnackbar} refresh={refresh} />\n                    <SelectOptions courseData={courseData} batchData={batchData} selectedBatch={selectedBatch} setSelectedBatch={setSelectedBatch} selectedCourse={selectedCourse} setSelectedCourse={setSelectedCourse} handleShowSnackbar={handleShowSnackbar} setShortLoading={setShortLoading} refreshData={refreshData} />\n                    <StudentDetails selectedCourse={selectedCourse} selectedBatch={selectedBatch} setIsLoading={setIsLoading} handleShowSnackbar={handleShowSnackbar} refresh={refresh} isUser={isUser} />\n                </Suspense>\n\n                {settingsOpen && (\n                    <Suspense fallback={<LoadingSkeletonAlternate />}>\n                        <UserSettings settingsOpen={settingsOpen} setSettingsOpen={setSettingsOpen} handleShowSnackbar={handleShowSnackbar} />\n                    </Suspense>\n                )}\n                \n                {(isLoading || shortLoading) && <LoadingSkeleton />}\n\n                {openDrawer && (\n                    <Suspense fallback={<LoadingSkeletonAlternate />}>\n                        <DashboardDrawer\n                            openDrawer={openDrawer}\n                            setOpenDrawer={setOpenDrawer}\n                            selectedCourse={selectedCourse}\n                            selectedBatch={selectedBatch}\n                            user={isUser}\n                            userCourse={userCourse}\n                            handleShowSnackbar={handleShowSnackbar}\n                            setPostJob={setPostJob}\n                            setPostedJob={setPostedJob}\n                            setSendMsgToStd={setSendMsgToStd}\n                            setShowSendMsg={setShowSendMsg}\n                            setStudentsFeedback={setStudentsFeedback}\n                            setSettingsOpen={setSettingsOpen}\n                            setConfirmLogout={setConfirmLogout}\n                            view={'Placements Dashboard'}\n                        />\n                    </Suspense>\n                )}\n\n                {postJob && (\n                    <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <JobAnnoucement\n                        isOpen={postJob}\n                        setIsOpen={setPostJob}\n                        selectedCourse={selectedCourse}\n                        selectBatchname={selectedBatch}\n                        setIsLoading={setIsLoading}\n                        handleShowSnackbar={handleShowSnackbar}\n                    />\n                </Suspense>\n            )}\n\n            {postedJobs && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <ViewJobAnnouncements\n                        isOpen={postedJobs}\n                        setIsOpen={setPostedJob}\n                        selectedCourse={selectedCourse}\n                        selectBatchname={selectedBatch}\n                        setIsLoading={setIsLoading}\n                        handleShowSnackbar={handleShowSnackbar}\n                    />\n                </Suspense>\n            )}\n\n            {sendMsgToStd && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <MessageToStudents\n                        isOpen={sendMsgToStd}\n                        setIsOpen={setSendMsgToStd}\n                        selectedCourse={selectedCourse}\n                        selectedBatch={selectedBatch}\n                        User={isUser}\n                        handleShowSnackbar={handleShowSnackbar}\n                        setIsLoading={setIsLoading}\n                    />\n                </Suspense>\n            )}\n\n            {showSendMsg && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <SentMessages\n                        isOpen={showSendMsg}\n                        setIsOpen={setShowSendMsg}\n                        selectedCourse={selectedCourse}\n                        selectedBatch={selectedBatch}\n                        User={isUser}\n                        handleShowSnackbar={handleShowSnackbar}\n                        setIsLoading={setIsLoading}\n                    />\n                </Suspense>\n            )}\n\n            {studentsFeedback && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <StudentsFeedback\n                        isOpen={studentsFeedback}\n                        setIsOpen={setStudentsFeedback}\n                        selectedCourse={selectedCourse}\n                        selectedBatch={selectedBatch}\n                        handleShowSnackbar={handleShowSnackbar}\n                        setIsLoading={setIsLoading}\n                    />\n                </Suspense>\n            )}\n\n            {batchNotif && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <AdminNotifications\n                        isOpen={batchNotif}\n                        setIsOpen={setBatchNotif}\n                        handleShowSnackbar={handleShowSnackbar}\n                        setIsLoading={setIsLoading}\n                        setNotifLen={setNotifLen}\n                    />\n                </Suspense>\n            )}\n\n            {openDrive && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <Drive\n                        isOpen={openDrive}\n                        setIsOpen={setOpenDrive}\n                        handleShowSnackbar={handleShowSnackbar}\n                        setIsLoading={setIsLoading} \n                    />\n                </Suspense>\n            )}\n\n            <ReportDialog isOpen={reportIssue} setIsOpen={setReportIssue} setLoading={setIsLoading} />\n\n            {stdMessages && (\n                <Suspense fallback={<LoadingSkeletonAlternate />}>\n                    <StudentMessages\n                        isOpen={stdMessages}\n                        setIsOpen={setStdMessages}\n                        selectedCourse={selectedCourse}\n                        selectedBatch={selectedBatch}\n                        handleShowSnackbar={handleShowSnackbar}\n                        setIsLoading={setIsLoading}\n                        setStdMsgLen={setStdMsgLen}\n                        isLoading={isLoading}\n                    />\n                </Suspense>\n            )}\n\n            <Dialog open={confirmLogout} sx={{ zIndex: '710' }}>\n                <DialogTitle>Are you sure you want to logout?</DialogTitle>\n                <DialogContent>You will be redirected to the login page.</DialogContent>\n                <DialogActions>\n                    <Button variant='outlined' onClick={() => setConfirmLogout(false)}>Cancel</Button>\n                    <Button variant='contained' onClick={() => { handleLogout(); setConfirmLogout(false); }}>Logout</Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n    } else if (isUserAuthenticated || isPlacementsAuthenticated){\n        return (\n            <ExpiredPage />\n        );\n    }else{\n        navigate(`/vcube/error/${sessionStorage.getItem('UniqueURL').substring(30,70)}`);\n    }\n    }else{\n        <LoadingSkeletonAlternate/>\n    }\n};\n\nexport default PlacementsDashboard;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { stdAuth } from './StudentsFirebase';\nimport { auth } from './UsersFirebase';\nimport { is_User, isStdLogin, isUserLogin, UserDetails } from \"../UserDetails\";\nimport { DateTime } from \"../date-time\";\n\nexport const UseUserAuthentication = async (checkUserAuth, setIs_User_Authenticated) => {\n    try {\n        const user = UserDetails('All');\n        const dateTime = DateTime().split(' ');\n        if (user && is_User() !== 'Student' &&\n            isUserLogin() === (`True -> ${user.Username} -> ${dateTime[0]}`) &&\n            await checkUserAuth() === true) {\n\n            const unsubscribe = onAuthStateChanged(auth, (g_user) => {\n                setIs_User_Authenticated(!!g_user);\n            });\n\n            return () => {\n                unsubscribe();\n            };\n        } else {\n            setIs_User_Authenticated(false);\n        }\n    } catch (error) {\n        setIs_User_Authenticated(false);\n    }\n};\n\nexport const UseStudentAuthentication = async (checkStdAuth, setIsStdAuthenticated) => {\n    const student = sessionStorage.getItem('StudentDetails_ID');\n    const dateTime = DateTime().split(' ');\n    try {\n        if (student && is_User() === 'Student' &&\n        isStdLogin() === (`True -> ${student} -> ${dateTime[0]}`) &&\n        await checkStdAuth() === true) {\n\n            const unsubscribe = onAuthStateChanged(stdAuth, (g_user) => {\n                setIsStdAuthenticated(!!g_user);\n            });\n\n            return () => unsubscribe();\n        } else {\n            setIsStdAuthenticated(false);\n        }\n    } catch (error) {\n        setIsStdAuthenticated(false);\n    }\n};\n","import React, { lazy, useEffect, useState } from 'react';\nimport { UserDetails } from '../UserDetails';\nimport { DateTime } from '../date-time';\n\nconst StorageVault = lazy(()=> import('./StorageVault'));\nconst DrivePin = lazy(()=> import('./DrivePin'));\n\nconst Drive = ({ isOpen, setIsOpen, handleShowSnackbar, setIsLoading }) => {\n  const [isValidated, setIsValidated] = useState(false);\n  const driveUser = UserDetails('Drive');\n\n  useEffect(()=>{\n    setIsValidated(driveUser && driveUser.Is_Validated && driveUser.Validated_Date === DateTime().split(' ')[0]);\n  },[isValidated])\n\n  return driveUser && isValidated && driveUser.Is_Validated && driveUser.Validated_Date === DateTime().split(' ')[0] ? \n    <StorageVault isOpen={isOpen} setIsOpen={setIsOpen} handleShowSnackbar={handleShowSnackbar} setIsLoading={setIsLoading}\n                  isValidated={isValidated} driveUser={driveUser} /> :\n    <DrivePin isOpen={isOpen} setIsOpen={setIsOpen} handleShowSnackbar={handleShowSnackbar} setIsLoading={setIsLoading} setIsValidated={setIsValidated} />\n}\n\nexport default Drive;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96\"\n}), 'CloudRounded');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 12c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8 9c0-.55-.45-1-1-1H5.09C6.47 5.61 9.05 4 12 4c3.49 0 6.45 2.24 7.54 5.36.14.39.53.64.94.64.68 0 1.18-.67.96-1.31C20.07 4.79 16.36 2 12 2 8.73 2 5.82 3.58 4 6.01V5c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1m8 6c0 .55.45 1 1 1h1.91c-1.38 2.39-3.96 4-6.91 4-3.49 0-6.45-2.24-7.54-5.36-.14-.39-.53-.64-.94-.64-.68 0-1.18.67-.96 1.31C3.93 19.21 7.64 22 12 22c3.27 0 6.18-1.58 8-4.01V19c0 .55.45 1 1 1s1-.45 1-1v-4c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1\"\n}, \"1\")], 'FlipCameraAndroidRounded');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 19v-5h4v5c0 .55.45 1 1 1h3c.55 0 1-.45 1-1v-7h1.7c.46 0 .68-.57.33-.87L12.67 3.6c-.38-.34-.96-.34-1.34 0l-8.36 7.53c-.34.3-.13.87.33.87H5v7c0 .55.45 1 1 1h3c.55 0 1-.45 1-1\"\n}), 'HomeRounded');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2m6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-1.29 1.29c-.63.63-.19 1.71.7 1.71h13.17c.89 0 1.34-1.08.71-1.71z\"\n}), 'NotificationsRounded');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 2H4.01c-1.1 0-2 .9-2 2L2 19.58c0 .89 1.08 1.34 1.71.71L6 18h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m-8 4c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2m4 8H8v-.57c0-.81.48-1.53 1.22-1.85.85-.37 1.79-.58 2.78-.58s1.93.21 2.78.58c.74.32 1.22 1.04 1.22 1.85z\"\n}), 'ThreePRounded');"],"names":["OverView","lazy","SelectOptions","StudentDetails","DashboardDrawer","JobAnnoucement","ViewJobAnnouncements","MessageToStudents","SentMessages","StudentsFeedback","AdminNotifications","StudentMessages","UserSettings","PlacementsDashboard","fetchBatchData","useContext","BatchContext","fetchCourse","CourseContext","userGoogleLogout","UserGoogleContext","logout","isPlacementsAuthenticated","useAuth","checkUserAuth","UsersAuthContext","navigate","useNavigate","isUser","UserDetails","userCourse","openDrawer","setOpenDrawer","useState","selectedBatch","setSelectedBatch","selectedCourse","setSelectedCourse","batchData","setBatchData","courseData","setCourseData","isLoading","setIsLoading","shortLoading","setShortLoading","postJob","setPostJob","postedJobs","setPostedJob","confirmLogout","setConfirmLogout","sendMsgToStd","setSendMsgToStd","showSendMsg","setShowSendMsg","settingsOpen","setSettingsOpen","studentsFeedback","setStudentsFeedback","batchNotif","setBatchNotif","notifLen","setNotifLen","stdMessages","setStdMessages","stdMsgLen","setStdMsgLen","isUserAuthenticated","setIsUserAuthenticated","openDrive","setOpenDrive","reportIssue","setReportIssue","isAuthChecked","setIsAuthChecked","refresh","setRefresh","handleShowSnackbar","variant","message","enqueueSnackbar","anchorOrigin","vertical","horizontal","action","key","_jsx","IconButton","onClick","closeSnackbar","color","children","CloseRounded","Check_Auth","async","UseUserAuthentication","fetchData","batch_data","course_Data","error","useEffect","setTimeout","refreshData","_jsxs","Box","className","sx","boxShadow","Typography","HomeRounded","fontSize","marginRight","Tooltip","title","arrow","MenuRounded","CloudRounded","Badge","badgeContent","max","ThreePRounded","ReportProblemRounded","sessionStorage","getItem","substring","FlipCameraAndroidRounded","NotificationsRounded","Suspense","fallback","LoadingSkeletonAlternate","LoadingSkeleton","user","view","isOpen","setIsOpen","selectBatchname","User","Drive","ReportDialog","setLoading","Dialog","open","zIndex","DialogTitle","DialogContent","DialogActions","Button","ExpiredPage","setIs_User_Authenticated","dateTime","DateTime","split","is_User","isUserLogin","Username","unsubscribe","onAuthStateChanged","auth","g_user","UseStudentAuthentication","checkStdAuth","setIsStdAuthenticated","student","isStdLogin","stdAuth","StorageVault","DrivePin","_ref","isValidated","setIsValidated","driveUser","Is_Validated","Validated_Date","createSvgIcon","d"],"sourceRoot":""}