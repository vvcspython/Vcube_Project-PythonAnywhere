{"version":3,"file":"static/js/2981.24449a56.chunk.js","mappings":"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","sources":["components/dashboard/BatchAttendance.js"],"sourcesContent":["import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, FormHelperText, IconButton, InputLabel, MenuItem, Select, Typography } from '@mui/material';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { DateTime } from '../date-time';\nimport { CancelRounded, CheckCircleRounded, CloseRounded } from '@mui/icons-material';\nimport { BatchContext } from '../api/batch';\nimport { BatchAttendanceContext } from '../api/batch-attendance';\n\nconst BatchAttendance = ({ isOpen, setIsOpen, selectedCourse, type, handleShowSnackbar, setIsLoading, fetchBatchAttData, studentsData, select_Batch }) => {\n    const { fetchBatchData } = useContext(BatchContext);\n    const { fetchBatchAttendanceDataByCourse, postBatchAttendanceData } = useContext(BatchAttendanceContext);\n    const [batchData, setBatchData] = useState([]);\n    const [batchAttendanceData, setBatchAttendanceData] = useState(null);\n    const [selectedBatch, setSelectedBatch] = useState(null);\n    const [isSubmit, setIsSubmit] = useState(null);\n    const studentCount = Array.isArray(studentsData) ? studentsData.filter((data)=> data.Course === selectedCourse && (data.BatchName === select_Batch || select_Batch === 'All')).length : 0;\n    const dateTime = DateTime().split(' ');\n\n    const fetchData = async () => {\n        const res = await fetchBatchData(selectedCourse);\n        const result = await fetchBatchAttendanceDataByCourse(selectedCourse);\n        if((res && res.message)){\n            handleShowSnackbar('error',res.message);\n            handleClose();\n        }else if(res && res.length > 0){\n            setBatchData(res);\n            if(result)setBatchAttendanceData(result);\n        }else if(res && res.length === 0){\n            handleShowSnackbar('info','No Data Found.');\n            handleClose();\n        }\n    };\n\n    useEffect(()=>{\n        selectedCourse && fetchData();\n    },[isOpen])\n    \n    const handleClose = () => {\n        setIsSubmit(false);\n        setSelectedBatch(null);\n        setIsOpen(false);\n    };\n\n    const handleSubmit = () => {\n        setIsSubmit(true);\n        if(!selectedBatch)return;\n        setIsLoading(true);\n        makeData();\n    }\n\n    const makeData = () => {\n        if(selectedBatch === 'All'){\n            const batchAttData = []\n            batchData && batchData.forEach((batchData)=>{\n                const data = {\n                    BatchId : batchData.id,\n                    Course : batchData.Course,\n                    BatchName : batchData.BatchName,\n                    Date : dateTime[0],\n                    Attendance_Type : type\n                }\n                batchAttData.push(data);\n            })\n            postData(batchAttData);\n            setIsLoading(false);\n        }else{\n            const getBatchData = batchData && batchData.find(data=>data.BatchName === selectedBatch);\n            const data = {\n                BatchId : getBatchData.id,\n                Course : getBatchData.Course,\n                BatchName : selectedBatch,\n                Date : dateTime[0],\n                Attendance_Type : type\n            }\n            postData([data]);\n        }\n    }\n\n    const postData = async (data) => {\n        const res = await postBatchAttendanceData(data);\n        setIsLoading(false);\n        if(res && res.message){\n            handleShowSnackbar('error',res.message);\n        }else{\n            handleShowSnackbar('success',`${type} Attendance added successfully.`);\n            fetchBatchAttData();\n        }\n        handleClose();\n    }\n    \n    const checkAtt = (data) => {\n        if (data) {\n            return Array.isArray(batchAttendanceData) && batchAttendanceData.some(\n                att_data =>\n                    att_data.Date === dateTime[0] && \n                    att_data.BatchName === data.BatchName && \n                    att_data.Attendance_Type === type\n            );\n        } else {\n            return Array.isArray(batchAttendanceData) && batchAttendanceData.some(\n                att_data => \n                    att_data.Date === dateTime[0] && \n                    att_data.Attendance_Type === type\n            );\n        }\n    };\n    \n  return (\n    <Dialog open={isOpen} sx={{zIndex : '700'}}>\n        <img src='/images/V-Cube-Logo.png' alt='' width='20%' className='ml-[40%]'/>\n        <DialogTitle variant='h5'>{type === 'Mock Test' ? 'Weekly Test' : type} Attendance</DialogTitle>\n        <IconButton className='top-2 right-2' sx={{position : 'absolute'}} onClick={handleClose}>\n            <CloseRounded sx={{fontSize : '35px'}} />\n        </IconButton>\n        <DialogContent>\n            <DialogContentText className='flex flex-col items-center justify-center'>\n                <Typography variant='h6' className='flex items-center' sx={{fontWeight : 'bold',color : '#000'}}>\n                    Date: <Typography color='primary' variant='h6' sx={{fontWeight : 'bold', marginLeft : '10px'}}>{`${dateTime[0]}`}</Typography>\n                </Typography>\n                <Typography variant='h6' className='flex items-center' sx={{fontWeight : 'bold',color : '#000'}}>\n                    Total Students: <Typography color='primary' variant='h6'  sx={{fontWeight : 'bold', margin : '10px 0 10px 10px'}}>{studentCount < 10 ? `0${studentCount}` : studentCount}</Typography>\n                </Typography>\n                <FormControl className='w-96 h-20' sx={{margin : '20px 0 10px 0'}}>\n                    <InputLabel className='flex items-center' sx={{fontSize : '20px',background : 'white', width : '123px', paddingLeft : '3px', display : 'flex', alignItems : 'center'}}\n                        >Select Batch</InputLabel>\n                    <Select\n                        error={isSubmit && !selectedBatch}\n                        sx={{fontSize : '20px',display : 'flex', alignItems : 'center', justifyContent : 'space-between'}}\n                        value={selectedBatch}\n                        onChange={(e)=>setSelectedBatch(e.target.value)}\n                        renderValue={(selected) => {\n                            const selectedBatchData = batchData.find(data => data.BatchName === selected);\n                            return selectedBatchData ? selectedBatchData.BatchName : selected;\n                        }}\n                    >\n                        {batchData && batchData.map((data)=>\n                            <MenuItem sx={{display : 'flex', alignItems : 'center', justifyContent : 'space-between'}} value={data.BatchName}\n                                disabled={checkAtt(data)}\n                                >{data.BatchName} {checkAtt(data) ? <CheckCircleRounded color='success' sx={{fontSize : '30px'}} /> : <CancelRounded  color='error' sx={{fontSize : '30px'}} />}\n                            </MenuItem>\n                        )}\n                        {batchData && batchData.length > 0 && <MenuItem value=\"All\"\n                            disabled={checkAtt()}\n                        >All Batches</MenuItem>}\n                    </Select>\n                    <FormHelperText sx={{color : '#f44336', marginLeft : '5px'}}>{isSubmit && !selectedBatch ? 'Select Batch' : ''}</FormHelperText>\n                </FormControl>\n            </DialogContentText>\n            <DialogActions>\n                <Button sx={{width : '90%', marginRight : '5%', height : '45px'}} variant='contained' onClick={handleSubmit}>Submit {type} Attendance</Button>\n            </DialogActions>\n        </DialogContent>\n    </Dialog>\n  )\n}\n\nexport default BatchAttendance;"],"names":["_ref","isOpen","setIsOpen","selectedCourse","type","handleShowSnackbar","setIsLoading","fetchBatchAttData","studentsData","select_Batch","fetchBatchData","useContext","BatchContext","fetchBatchAttendanceDataByCourse","postBatchAttendanceData","BatchAttendanceContext","batchData","setBatchData","useState","batchAttendanceData","setBatchAttendanceData","selectedBatch","setSelectedBatch","isSubmit","setIsSubmit","studentCount","Array","isArray","filter","data","Course","BatchName","length","dateTime","DateTime","split","useEffect","async","res","result","message","handleClose","fetchData","makeData","batchAttData","forEach","BatchId","id","Date","Attendance_Type","push","postData","getBatchData","find","checkAtt","some","att_data","_jsxs","Dialog","open","sx","zIndex","children","_jsx","src","alt","width","className","DialogTitle","variant","IconButton","position","onClick","CloseRounded","fontSize","DialogContent","DialogContentText","Typography","fontWeight","color","marginLeft","margin","FormControl","InputLabel","background","paddingLeft","display","alignItems","Select","error","justifyContent","value","onChange","e","target","renderValue","selected","selectedBatchData","map","MenuItem","disabled","CheckCircleRounded","CancelRounded","FormHelperText","DialogActions","Button","marginRight","height","handleSubmit"],"sourceRoot":""}