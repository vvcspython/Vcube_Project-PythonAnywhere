{"version":3,"file":"static/js/6405.60463e9d.chunk.js","mappings":"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","sources":["components/settings/Performance.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { LineChart } from '@mui/x-charts';\nimport { Box, Button, TextField } from '@mui/material';\nimport { LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { StudentsContext } from '../api/students';\nimport { BatchAttendanceContext } from '../api/batch-attendance';\n\nconst PerformanceInsights = ({ setIsLoading, handleShowSnackbar }) => {\n  const { fetchStudentsData, getStudentAttendanceByCourse } = useContext(StudentsContext);\n  const { fetchBatchAttendanceDataByCourse } = useContext(BatchAttendanceContext);\n  const [selectedYear, setSelectedYear] = useState(new Date());\n  const [studentAttData, setStudentAttData] = useState([]);\n  const [studentsData, setStudentsData] = useState([]);\n  const [batchAttData, setBatchAttData] = useState([]);\n  const [studentAttendaceData, setStudentAttendaceData] = useState(Array(12).fill(0));\n  const selectedCourse = sessionStorage.getItem('SelectedCourse');\n\n  const monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const xLabels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  \n  const fetchStdData = async () => {\n    setIsLoading(true);\n    try {\n      const [stdData, attData, batchAtt] = await Promise.all([\n        fetchStudentsData(selectedCourse),\n        getStudentAttendanceByCourse(selectedCourse),\n        fetchBatchAttendanceDataByCourse(selectedCourse)\n\n      ]);\n      if (stdData && stdData.message) {\n        handleShowSnackbar('error', stdData.message);\n        setStudentsData([]);\n      } else {\n        setStudentsData(stdData);\n        setStudentAttData(attData);\n        setBatchAttData(batchAtt);\n      }\n    } catch (error) {\n      handleShowSnackbar('error', 'Failed to fetch Student data');\n      setStudentsData([]);\n      setStudentAttData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (selectedCourse) {\n      fetchStdData();\n    }\n  }, [setIsLoading, selectedYear]);\n\n  const getPercentage = () => {\n      xLabels.forEach((month,index)=>{\n        const attArr = {\n          'Class': 0,\n          'Mock Test': 0,\n          'Interview': 0\n      };\n        Array.isArray(studentsData) && studentsData.length > 0 && studentsData.forEach((stdData)=>{\n          ['Class', 'Mock Test', 'Interview'].forEach((att)=>{\n            let attCnt = 0;\n            Array.isArray(studentAttData) && studentAttData.length > 0 && studentAttData.forEach((attData)=>{\n              if (attData.StudentId === stdData.id && attData.Name === `${stdData.Name}~${stdData.Phone}` &&\n                  attData.Attendance_Type === att &&\n                  `${attData.Date.split('-')[1]}-${attData.Date.split('-')[2]}` === `${month}-${selectedYear.getFullYear()}`)\n              {\n                  attCnt++;\n              }\n            })\n            attArr[att] += attCnt;\n        })\n      })\n      setAttendanceData(attArr, month, index);\n    })   \n  }\n\n  const setAttendanceData = (arr, month, index) => {\n    const stdLength = Array.isArray(studentsData) ? studentsData.length : 0;\n    const batchClassAtt = getBatchAtt(month, 'Class') * stdLength;\n    const batchMockAtt = getBatchAtt(month, 'Mock Test') * stdLength;\n    const batchInterviewAtt = getBatchAtt(month, 'Interview') * stdLength;\n    const classAtt = arr['Class'] > 0 && batchClassAtt > 0 ? (arr['Class'] / batchClassAtt) * 100 : 0;\n    const mockAtt = arr['Mock Test'] > 0 && batchMockAtt > 0 ? (arr['Mock Test'] / batchMockAtt) * 100 : 0;\n    const interviewAtt = arr['Interview'] > 0 && batchInterviewAtt > 0 ? (arr['Interview'] / batchInterviewAtt) * 100 : 0;\n    const totalAtt = classAtt + mockAtt + interviewAtt;\n    const result = totalAtt > 0 ? Math.floor((totalAtt / 300) * 100) : 0;\n    setStudentAttendaceData(prevValues => {\n      const newValues = [...prevValues];\n      newValues[index] = Math.floor(result);\n      return newValues;\n    });\n  };\n\n  const getBatchAtt = (month, type) => {\n    return (Array.isArray(batchAttData) && batchAttData.length ? batchAttData.filter((data)=> \n      data.Course === selectedCourse && data.Attendance_Type === type &&\n      `${data.Date.split('-')[1]}-${data.Date.split('-')[2]}` === `${month}-${selectedYear.getFullYear()}`).length \n    : \n    0 )\n  }\n\n  useEffect(()=>{\n    getPercentage();\n  },[selectedYear])\n\n  return (\n    <Box className=\"w-full mt-10 flex flex-col items-center justify-around\">\n      <LineChart\n        xAxis={[{ scaleType: 'point', data: xLabels }]}\n        series={[\n          {\n            data: studentAttendaceData,\n            area: true,\n            label : `Detailed ${selectedYear && selectedYear.getFullYear()} Performance Analysis.`,\n          },\n        ]}\n        width={950}\n        height={300}\n      />\n    <Box className='w-1/2 flex items-center justify-between'>\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <DatePicker\n          views={['year']}\n          label=\"Select Year\"\n          value={selectedYear}\n          onChange={(date)=>setSelectedYear(date)}\n          renderInput={(params) => <TextField {...params} />}\n        />\n      </LocalizationProvider>\n      <Button variant='contained' sx={{ borderRadius : '25px', width : '40%', height : '40px' }} onClick={getPercentage}\n        >Get Results</Button>\n    </Box>\n  </Box>\n  )\n}\n\nexport default PerformanceInsights;"],"names":["_ref","setIsLoading","handleShowSnackbar","fetchStudentsData","getStudentAttendanceByCourse","useContext","StudentsContext","fetchBatchAttendanceDataByCourse","BatchAttendanceContext","selectedYear","setSelectedYear","useState","Date","studentAttData","setStudentAttData","studentsData","setStudentsData","batchAttData","setBatchAttData","studentAttendaceData","setStudentAttendaceData","Array","fill","selectedCourse","sessionStorage","getItem","xLabels","useEffect","async","stdData","attData","batchAtt","Promise","all","message","error","fetchStdData","getPercentage","forEach","month","index","attArr","isArray","length","att","attCnt","StudentId","id","Name","Phone","Attendance_Type","split","getFullYear","setAttendanceData","arr","stdLength","batchClassAtt","getBatchAtt","batchMockAtt","batchInterviewAtt","totalAtt","result","Math","floor","prevValues","newValues","type","filter","data","Course","_jsxs","Box","className","children","_jsx","LineChart","xAxis","scaleType","series","area","label","width","height","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","views","value","onChange","date","renderInput","params","TextField","Button","variant","sx","borderRadius","onClick"],"sourceRoot":""}