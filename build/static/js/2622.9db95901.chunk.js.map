{"version":3,"file":"static/js/2622.9db95901.chunk.js","mappings":"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","sources":["components/InputField.js","components/api/LoginCheck.js","components/dashboard/UpdateDeleteAssignment.js","components/dashboard/StudentAssignmentRequests.js","components/dashboard/Index.js","components/noSpinnerField.js"],"sourcesContent":["import React from 'react';\nimport { TextField } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nconst StyledTextField = styled(TextField)(({ theme }) => ({\n  '& .MuiInputBase-input': {\n    fontSize: '20px',\n    padding: '5px 0',\n  },\n  '& .MuiInputLabel-root': {\n    fontSize: '20px',\n  },\n}));\n\nconst InputField = (props) => {\n  return (\n    < StyledTextField\n      {...props}\n      type=\"text\"\n      variant=\"standard\"\n    />\n  );\n};\n\nexport default InputField;\n\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { stdAuth } from './StudentsFirebase';\nimport { auth } from './UsersFirebase';\nimport { is_User, isStdLogin, isUserLogin, UserDetails } from \"../UserDetails\";\nimport { DateTime } from \"../date-time\";\n\nexport const UseUserAuthentication = async (checkUserAuth, setIs_User_Authenticated) => {\n    try {\n        const user = UserDetails('All');\n        const dateTime = DateTime().split(' ');\n        if (user && is_User() !== 'Student' &&\n            isUserLogin() === (`True -> ${user.Username} -> ${dateTime[0]}`) &&\n            await checkUserAuth() === true) {\n\n            const unsubscribe = onAuthStateChanged(auth, (g_user) => {\n                setIs_User_Authenticated(!!g_user);\n            });\n\n            return () => {\n                unsubscribe();\n            };\n        } else {\n            setIs_User_Authenticated(false);\n        }\n    } catch (error) {\n        setIs_User_Authenticated(false);\n    }\n};\n\nexport const UseStudentAuthentication = async (checkStdAuth, setIsStdAuthenticated) => {\n    const student = sessionStorage.getItem('StudentDetails_ID');\n    const dateTime = DateTime().split(' ');\n    try {\n        if (student && is_User() === 'Student' &&\n        isStdLogin() === (`True -> ${student} -> ${dateTime[0]}`) &&\n        await checkStdAuth() === true) {\n\n            const unsubscribe = onAuthStateChanged(stdAuth, (g_user) => {\n                setIsStdAuthenticated(!!g_user);\n            });\n\n            return () => unsubscribe();\n        } else {\n            setIsStdAuthenticated(false);\n        }\n    } catch (error) {\n        setIsStdAuthenticated(false);\n    }\n};\n","import React, { useContext, useState } from 'react';\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, IconButton, InputLabel, MenuItem, Select, TextField, Typography } from '@mui/material';\nimport NumberInput from '../noSpinnerField';\nimport { AssessmentContext } from '../api/Assessment';\nimport { CloseRounded } from '@mui/icons-material';\nimport InputField from '../InputField';\n\nconst UpdateDeleteAssignment = ({ isOpen, setIsOpen, handleShowSnackbar, setIsLoading, setOpenAssessment, setEditAssignment, setEditAssignmentData }) => {\n    const { fetchAssessmentQuestions, deleteAssessmentQuestions } = useContext(AssessmentContext);\n    const [id, setId] = useState(null);\n    const [name, setName] = useState(null);\n    const [option, setOption] = useState(null);\n    const [assignment, setAssignment] = useState(null);\n    const [delete_, setDelete_] = useState(null);\n\n    const manageAssignment = async () => {\n        setIsLoading(true);\n        const res = await fetchAssessmentQuestions(null,id);\n        setIsLoading(false);\n        if (res && res.message){\n            (res.response.status === 404) ? handleShowSnackbar('error','Assignment not found.') :\n            handleShowSnackbar('error',`Error occured ${res.message}`);\n            setOption(null);\n        }else if(res){\n            if(res[0] && JSON.parse(res[0].Question).Title.includes(name)){\n                setAssignment(res);\n            }else{\n                handleShowSnackbar('error','Assignment not found.');\n                setAssignment(null);\n                setOption(null);\n            }\n        }\n    }\n\n    const deleteAssignment = async () => {\n        setIsLoading(true);\n        const resp = await deleteAssessmentQuestions(assignment);\n        setIsLoading(false);\n        if (resp === true){\n            handleShowSnackbar('success','Assignment deleted successfully.');\n            handleClose();\n        }else if(resp && resp.message){\n            handleShowSnackbar('error',`Error occured ${resp.message}`);\n        }\n    }\n\n    const handleClose = () => {\n        setIsOpen(false);\n        setId(null);\n        setOption(null);\n        setAssignment(null);\n        setName(null);\n        setDelete_(null);\n    }\n\n  return (\n    <>\n    <Dialog open={isOpen} sx={{zIndex : '700'}}>\n        <img src='/images/V-Cube-Logo.png' alt='' width='15%' className='ml-[42.5%]'/>\n        <IconButton sx={{position : 'absolute'}} className='right-1 top-1' \n            onClick={handleClose}>\n                <CloseRounded fontSize='large' />\n        </IconButton>\n        <DialogTitle variant='h5'>Select Assignment's Option</DialogTitle>\n        <DialogContent className='h-[15rem] flex flex-col items-center justify-evenly'>\n            <Typography color='primary' >{assignment && id && option ? `Assignment Found: ${JSON.parse(assignment[0].Question).Title}` : \"You can find the ID & Name in Assignments tab of the Students Dashboard.\"}</Typography>\n            <Box className='w-[80%] flex items-center justify-between'>\n                <NumberInput value={id} onChange={(e)=>setId(e.target.value)} className='w-[15%]' label='ID' />\n                <InputField value={name} onChange={(e)=>setName(e.target.value)} className='w-[80%]' label='Assignment Name' />\n            </Box>\n            <FormControl className='w-[80%]' variant='standard' >\n                <InputLabel sx={{fontSize : '20px'}} >Select Assignment Option</InputLabel>\n                <Select\n                    value={option}\n                    readOnly={!id || !name}\n                    onChange={(e)=>{setOption(e.target.value);manageAssignment()}}\n                    sx={{width: '100%',\n                        '& .MuiInputBase-input': {\n                        fontSize: '20px',\n                        padding: '5px 0',\n                        },\n                        '& .MuiInputLabel-root': {\n                        fontSize: '20px',\n                        },}}>\n                    <MenuItem value='Update'>Update Assignment</MenuItem>\n                    <MenuItem value='Delete'>Delete Assignment</MenuItem>\n                </Select>\n            </FormControl>\n        </DialogContent>\n        {assignment && option && (option === 'Update' ? <DialogActions>\n            <Button variant='outlined' onClick={()=>setOption(null)} >Cancel</Button>\n            <Button variant='contained' onClick={()=>{setIsOpen(false);setOpenAssessment(true);setEditAssignmentData(assignment);setEditAssignment(true);setId(null);setOption(null);setName(null)}}>Submit</Button>\n        </DialogActions> : \n        <DialogActions className='w-full place-content-start flex flex-col items-center justify-evenly'>\n            <Typography className='w-full text-center'>Enter the \"<strong>Delete the {JSON.parse(assignment[0].Question).Title}</strong>\" in the below box.</Typography>\n            <TextField value={delete_} onChange={(e)=>setDelete_(e.target.value)}  className='w-full' sx={{margin : '10px 0'}} />     \n            <Button disabled={delete_ !== `Delete the ${JSON.parse(assignment[0].Question).Title}`} color='error' variant='contained' sx={{width : '100%', height : '40px'}} \n            onClick={deleteAssignment}>Delete Assignment</Button>\n        </DialogActions>)}\n    </Dialog>\n    </>\n  )\n}\n\nexport default UpdateDeleteAssignment;","import React, { useEffect, useState } from 'react';\nimport { Box, Button, Card, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton, Typography } from '@mui/material';\nimport { AssignmentRounded, CancelRounded, CheckCircleRounded, CloseRounded, DoNotDisturbAltRounded } from '@mui/icons-material';\nimport { mui_colors } from '../ExternalData';\n\nconst StudentAssignmentRequests = ({ isOpen, setIsOpen, data, fetchAssignmentResults, patchAssignmentResults, deleteAssignmentRequests, fetchStudentAssignmentRequestData, handleShowSnackbar, setIsLoading }) => {\n    const [status, setStatus] = useState(null);\n    const [submitData, setSubmitData] = useState(null);\n\n    const submitStatus = async () => {\n        setIsLoading(true);\n        const getRes = await fetchAssignmentResults(submitData.StudentId);\n        if(getRes && getRes.message){\n            handleShowSnackbar('error','Failed to get Data. Please try again later.');\n        }else if(getRes){\n            const getData = Array.isArray(getRes) && getRes.find((data)=>(\n                data.StudentId === submitData.StudentId && \n                data.Name === submitData.Name &&\n                data.Course === submitData.Course &&\n                data.BatchName === submitData.BatchName &&\n                data.Date === submitData.Date\n            ));\n            if(getData){\n                getData.Status = status === 'Accept' ? 'Start' : 'Disqualified';\n                const post = await patchAssignmentResults(getData);\n                if (post === true){\n                    await deleteAssignmentRequests(submitData);\n                    handleShowSnackbar('success','Student Status has been changed successfully.');\n                    fetchStudentAssignmentRequestData();\n                }else{\n                    handleShowSnackbar('error','Failed to change status. Please try again later.');\n                }\n            }else{\n                handleShowSnackbar('error','Something went wrong. Please try again later.');\n            }\n        }\n        setIsLoading(false);\n        setStatus(null);\n        setSubmitData(null);\n    }\n\n  return (\n    <>\n    <Dialog open={isOpen} onClose={()=>setIsOpen(false)} sx={{zIndex : '700'}}>\n        <img src='/images/V-Cube-Logo.png' width='16%' className='ml-[42%]' />\n        <IconButton sx={{position : 'absolute'}} className='top-1 right-1' onClick={()=>setIsOpen(false)}>\n            <CloseRounded fontSize='large' />\n        </IconButton>\n        <DialogTitle variant='h5'>Student Assignment Requests</DialogTitle>\n        <DialogContent className='w-full h-[35rem]'>\n            {Array.isArray(data) && data.length > 0 ? data.map((info, index)=>(\n            <Card key={index} className='p-3 w-full h-20 border-[1px] border-slate-300 flex items-center justify-between'>\n                <AssignmentRounded fontSize='large' sx={{color : mui_colors[index < 20 ? index : Math.floor(Math.random() * 20)]}} />\n                <Typography className='w-[70%] text-slate-500 text-start'>\n                    {info.Name.split('~')[0]}<br/>\n                    Requested to Re-entry.\n                </Typography>\n                <IconButton color='error' onClick={()=>{setStatus('Decline');setSubmitData(info)}}>\n                    <CancelRounded color='error'/>\n                </IconButton>\n                <IconButton color='success' onClick={()=>{setStatus('Accept');setSubmitData(info)}}>\n                    <CheckCircleRounded color='success'/>\n                </IconButton>\n            </Card>)) :\n            <Box className='w-full h-full flex flex-col items-center justify-center'>\n                <DoNotDisturbAltRounded sx={{fontSize : '100px', margin : '30px 0'}} color='action' />\n                <Typography color='grey' variant='h4'>No Requests Found</Typography>\n            </Box>}\n        </DialogContent>\n    </Dialog>\n\n    <Dialog open={status !== null && submitData !== null} sx={{zIndex : '710'}}>\n        <DialogTitle>Are you sure you want to {status} Student Request?</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                {status === 'Decline' ? \n                'Student Status is marked as Disqualified and Student can no longer Enter or Complete Assignment.' : \n                'Student can Enter again and Complete their Assignment.'}\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button variant='outlined' onClick={()=>setStatus(null)}>Cancel</Button>\n            <Button variant='contained' onClick={submitStatus}>Confirm</Button>\n        </DialogActions>\n    </Dialog>\n    </>\n  )\n}\n\nexport default StudentAssignmentRequests","import React, { useContext, useEffect, useState, lazy, Suspense, useCallback } from 'react';\nimport { Box, IconButton, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, Badge, Tooltip } from '@mui/material';\nimport { AssignmentLateRounded, CloseRounded, CloudRounded, FlipCameraAndroidRounded, HomeRounded, MenuRounded, NotificationsRounded, ReportProblemRounded, ReportRounded, ThreePRounded } from '@mui/icons-material';\nimport { useAuth } from '../api/AuthContext';\nimport { useNavigate } from 'react-router-dom';\nimport { useSnackbar } from 'notistack';\nimport { UsersAuthContext } from '../api/UsersAuth';\nimport { BatchContext } from '../api/batch';\nimport { CourseContext } from '../api/Course';\nimport { BatchAttendanceContext } from '../api/batch-attendance';\nimport { UserGoogleContext } from '../api/Google';\nimport { UserDetails } from '../UserDetails';\nimport { UseUserAuthentication } from '../api/LoginCheck';\nimport UpdateDeleteAssignment from './UpdateDeleteAssignment';\nimport ReportDialog from '../ReportDialog';\nimport { StudentsContext } from '../api/students';\nimport { DateTime } from '../date-time';\nimport StudentAssignmentRequests from './StudentAssignmentRequests';\n\nconst StudentProgressOverview = lazy(() => import('./StudentProgressOverview'));\nconst Search = lazy(() => import('./search'));\nconst StudentDetails = lazy(() => import('./studentDetails'));\nconst CustomDialog = lazy(() => import('./Dialog'));\nconst LoadingSkeleton = lazy(() => import('../skeleton'));\nconst LoadingSkeletonAlternate = lazy(()=> import('../LoadingSkeletonAlternate'));\nconst StudentForm = lazy(() => import('../student-form/Index'));\nconst UserSettings = lazy(() => import('../settings'));\nconst DashboardDrawer = lazy(() => import('./DashboardDrawer'));\nconst BatchOptions = lazy(() => import('./BatchOptions'));\nconst CourseOptions = lazy(() => import('./CourseOptions'));\nconst JobAnnoucement = lazy(() => import('../Placements/JobAnnoucement'));\nconst ViewJobAnnouncements = lazy(() => import('../Placements/ViewJobAnnouncements'));\nconst UploadCodingQuestions = lazy(() => import('./UploadCodingQuestions'));\nconst BatchAttendance = lazy(() => import('./BatchAttendance'));\nconst MessageToStudents = lazy(() => import('./MessageToStudents'));\nconst SentMessages = lazy(() => import('./SentMessages'));\nconst StudentsFeedback = lazy(() => import('./StudentsFeedback'));\nconst SendMessagesToBatch = lazy(() => import('./SendMessagesToBatch'));\nconst AdminNotifications = lazy(() => import('./AdminNotifications'));\nconst StudentMessages = lazy(() => import('./StudentMessages'));\nconst UploadRecordings = lazy(() => import('./UploadRecordings'));\nconst ShowRecordings = lazy(()=> import('./ShowRecordings'));\nconst ExpiredPage = lazy(()=> import('../ExpiredPage'));\nconst Drive = lazy(()=> import('./Drive'));\nconst Reports = lazy(()=> import('./Reports'));\n\nconst Dashboard = () => {\n  const { userAuthChk, isUserAuthenticated } = useAuth();\n  const { removeUserLoginData, checkUserAuth } = useContext(UsersAuthContext);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { fetchBatchData } = useContext(BatchContext);\n  const { fetchCourse } = useContext(CourseContext);\n  const { fetchBatchAttendanceDataByCourse } = useContext(BatchAttendanceContext);\n  const { userGoogleLogout } = useContext(UserGoogleContext);\n  const { fetchAssignmentResults, patchAssignmentResults, fetchAssignmentRequests, deleteAssignmentRequests } = useContext(StudentsContext);\n  const navigate = useNavigate();\n  const isUser = UserDetails('User');\n  const userCourse = UserDetails('Course');\n  const [dialog, setDialog] = useState(false);\n  const [stdFormOpen, setStdFormOpen] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [dialogMsg, setDialogMsg] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [shortLoading, setShortLoading] = useState(true);\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const [openAssessment, setOpenAssessment] = useState(false);\n  const [openBatchOption, setOpenBatchOption] = useState(false);\n  const [batchOption, setBatchOption] = useState(null);\n  const [openCourseOption, setOpenCourseOption] = useState(false);\n  const [courseOption, setCourseOption] = useState(null);\n  const [delete_Assessment, setDelete_Assessment] = useState(false);\n  const [studentsData, setStudentsData] = useState([]);\n  const [batchData, setBatchData] = useState([]);\n  const [courseData, setCourseData] = useState([]);\n  const [batchAttData, setBatchAttData] = useState([]);\n  const [postJob, setPostJob] = useState(false);\n  const [postedJobs, setPostedJob] = useState(false);\n  const [selectedBatch, setSelectedBatch] = useState(null);\n  const [selectedCourse, setSelectedCourse] = useState(null);\n  const [importData, setImportData] = useState(false);\n  const [confirmLogout, setConfirmLogout] = useState(false);\n  const [batchAttendanceType, setBatchAttendanceType] = useState(null);\n  const [openBatchAttendamceDialog, setOpenBatchAttendanceDialog] = useState(false);\n  const [takeStdAtt, setTakeStdAtt] = useState(false);\n  const [sendMsgToStd, setSendMsgToStd] = useState(false);\n  const [showSendMsg, setShowSendMsg] = useState(false);\n  const [studentsFeedback, setStudentsFeedback] = useState(false);\n  const [msgToBatch, setMsgToBatch] = useState(false);\n  const [batchNotif, setBatchNotif] = useState(false);\n  const [notifLen, setNotifLen] = useState(0);\n  const [stdMessages, setStdMessages] = useState(false);\n  const [stdMsgLen, setStdMsgLen] = useState(0);\n  const [uploadRecording, setUploadRecording] = useState(false);\n  const [showRecording, setShowRecording] = useState(false);\n  const [openStdAttDialog, setOpenStdAttDialog] = useState(false);\n  const [is_User_Authenticated, setIs_User_Authenticated] = useState(false);\n  const [openDrive, setOpenDrive] = useState(false);\n  const [openReport, setOpenReport] = useState(false);\n  const [reportLen, setReportLen] = useState(0);\n  const [editAssignment, setEditAssignment] = useState(false);\n  const [editAssignmentData, setEditAssignmentData] = useState(null);\n  const [reportIssue, setReportIssue] = useState(false);\n  const [refresh, setRefresh] = useState(false);\n  const [isAuthChecked, setIsAuthChecked] = useState(false);\n  const [stdAttViewType, setStdAttViewType] = useState('Class');\n  const [assignmentRequests, setAssignmentRequests] = useState(false);\n  const [studentAssignmentRequests, setstudentAssignmentRequests] = useState([]);\n\n  const handleShowSnackbar = useCallback((variant, message) => {\n    enqueueSnackbar(message, {\n      variant: variant, \n      anchorOrigin: { vertical: 'top', horizontal: 'right' },\n      action: (key) => (\n        <IconButton><CloseRounded onClick={() => closeSnackbar(key)} color=\"inherit\" /></IconButton>\n      )\n    });\n  }, [enqueueSnackbar, closeSnackbar]);\n\n  const Check_Auth = async () => {\n    await UseUserAuthentication(checkUserAuth, setIs_User_Authenticated);\n    !isAuthChecked && setIsAuthChecked(true);\n  }\n\n  useEffect(() => {\n    if (isLoading){\n      setTimeout(() => setIsLoading(false), 3000);\n    }\n    Check_Auth();\n  }, []);\n\n  useEffect(() => {\n    if (shortLoading) {\n      setTimeout(() => setShortLoading(false), 1000);\n    }\n    Check_Auth();\n  }, [shortLoading]);\n\n  const fetchData = useCallback(async () => {\n    const batch_data = await fetchBatchData();\n    const course_Data = (userCourse === 'All') && await fetchCourse();\n    if ((batch_data && batch_data.message) || ((userCourse === 'All') && course_Data && course_Data.message)) {\n      handleShowSnackbar('error', batch_data.message);\n    } else {\n      setBatchData(batch_data);\n      setCourseData((userCourse === 'All') && course_Data);\n    }\n  }, [fetchBatchData, fetchCourse, userCourse, handleShowSnackbar]);\n\n  const fetchBatchAttData = useCallback(async () => {\n    const res = await fetchBatchAttendanceDataByCourse(selectedCourse);\n    if (res && res.message === 'Network Error') {\n      handleShowSnackbar('error', res.message);\n    } else if (res) {\n      setBatchAttData(res);\n    }\n  }, [fetchBatchAttendanceDataByCourse, selectedCourse, handleShowSnackbar]);\n\n  const fetchStudentAssignmentRequestData = async () => {\n    const res = await fetchAssignmentRequests();\n    if (res && !res.message){\n      const data = Array.isArray(res) && res.filter((data)=>(\n        data.BatchName === selectedBatch &&\n        data.Course === selectedCourse &&\n        data.Date === DateTime().split(' ')[0]\n      ))\n      setstudentAssignmentRequests(data);\n    }\n  }\n\n  const handleLogout = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      removeUserLoginData();\n      userGoogleLogout();\n      userAuthChk();\n      navigate('/');\n    }, 500);\n  }; \n\n  useEffect(() => {\n    isAuthChecked && Check_Auth();\n    fetchData();\n    fetchStudentAssignmentRequestData();\n    if (userCourse !== 'All')setSelectedCourse(userCourse);\n  }, [shortLoading, isLoading]);\n\n  const refreshData = async () => {\n    setRefresh(!refresh);\n    setIsLoading(true);\n    await Check_Auth();\n    await fetchData();\n    await fetchBatchAttData();\n    fetchStudentAssignmentRequestData();\n    setIsLoading(false);\n  }\n\n  if(isAuthChecked){\n    if(isUserAuthenticated && is_User_Authenticated){\n      return (\n      <Box className=\"w-screen h-screen bg-slate-100\">\n        <Box className=\"w-screen h-16 flex items-center justify-between pl-5 pr-5 bg-[#1976d2]\" sx={{ boxShadow: '0 0 15px rgba(0,0,0,0.5)' }}>\n          <Typography className='flex items-center' variant='h6' sx={{ color: 'white' }}>\n            <HomeRounded sx={{ fontSize: '25px', marginRight: '10px', color: 'white' }} /> \n            Dashboard\n          </Typography>\n          <Box className='w-1/4 h-full flex flex-row-reverse items-center justify-between'>\n          <Tooltip title='Menu' arrow>\n          <IconButton onClick={() => setOpenDrawer(true)}>\n            <Box className='rounded-full flex items-center justify-center'>\n              <MenuRounded fontSize='large' sx={{color : 'white'}} />\n            </Box>\n          </IconButton>\n          </Tooltip>\n          <Tooltip title='VCube Drive' arrow>\n            <IconButton  onClick={() => setOpenDrive(true)}>\n                <CloudRounded sx={{ fontSize: '28px', color: 'white' }} />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title='Student Messages' arrow>\n            <IconButton onClick={() => setStdMessages(true)}>\n              <Badge badgeContent={stdMsgLen} color='error' max={99}>\n                <ThreePRounded sx={{ fontSize: '28px', color: 'white' }} />\n              </Badge>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title='Reports' arrow>\n            <IconButton onClick={() => setOpenReport(true)}>\n                <Badge badgeContent={reportLen} color='error' max={99}>\n                  <ReportRounded sx={{ fontSize: '28px', color: 'white' }} />\n                </Badge>\n            </IconButton>\n          </Tooltip>\n          <Tooltip title='Report an Issue' arrow>\n            <IconButton onClick={() => setReportIssue(true)}>\n                  <ReportProblemRounded sx={{ fontSize: '28px', color: 'white' }} />\n            </IconButton>\n          </Tooltip>\n          {isUser === 'Super Admin' ? <Tooltip title='Navigate to Placements Dashboard' arrow>\n            <IconButton onClick={() => navigate(`/vcube/placements/dashboard/${sessionStorage.getItem('UniqueURL').substring(30,60)}`)} \n              >\n                <FlipCameraAndroidRounded sx={{ fontSize: '28px', color: 'white' }} />\n            </IconButton>\n          </Tooltip>\n            :\n          <Tooltip title='Your Notifications' arrow>\n            <IconButton onClick={() => setBatchNotif(true)}>\n              <Badge badgeContent={notifLen} color='error' max={99}>\n                <NotificationsRounded sx={{ fontSize: '28px', color: 'white' }} />\n              </Badge>\n            </IconButton>\n          </Tooltip>}\n          {Array.isArray(studentAssignmentRequests) && studentAssignmentRequests.length > 0 &&\n          <Tooltip title='Student Assignmnet Requests' arrow>\n            <IconButton onClick={() => setAssignmentRequests(true)}>\n                <Badge badgeContent={studentAssignmentRequests.length} color='error' max={99}>\n                  <AssignmentLateRounded sx={{ fontSize: '28px', color: 'white' }} />\n                </Badge>\n            </IconButton>\n          </Tooltip>}\n          </Box>\n        </Box>\n        {(isLoading || shortLoading) && <LoadingSkeleton />}\n        <Suspense fallback={<LoadingSkeletonAlternate />}>\n          <StudentProgressOverview\n            batchAttData={batchAttData}\n            fetchBatchAttData={fetchBatchAttData}\n            setOpenBatchAttendanceDialog={setOpenBatchAttendanceDialog}\n            setBatchAttendanceType={setBatchAttendanceType}\n            selectedCourse={selectedCourse}\n            handleShowSnackbar={handleShowSnackbar}\n            selectedBatch={selectedBatch}\n            studentsData={studentsData}\n            openStdAttDialog={openStdAttDialog}\n            batchData={batchData}\n            refresh={refresh}\n          />\n          <Search\n            user={isUser}\n            courseData={courseData}\n            batchData={batchData}\n            selectedBatch={selectedBatch}\n            setSelectedBatch={setSelectedBatch}\n            selectedCourse={selectedCourse}\n            setSelectedCourse={setSelectedCourse}\n            handleShowSnackbar={handleShowSnackbar}\n            userCourse={userCourse}\n            setShortLoading={setShortLoading}\n            setTakeStdAtt={setTakeStdAtt}\n            refreshData={refreshData}\n            stdAttViewType={stdAttViewType}\n            setStdAttViewType={setStdAttViewType}\n          />\n          <StudentDetails\n            studentsData={studentsData}\n            setStudentsData={setStudentsData}\n            selectedBatch={selectedBatch}\n            selectedCourse={selectedCourse}\n            setIsLoading={setIsLoading}\n            handleShowSnackbar={handleShowSnackbar}\n            importData={importData}\n            setImportData={setImportData}\n            takeStdAtt={takeStdAtt}\n            setTakeStdAtt={setTakeStdAtt}\n            openStdAttDialog={openStdAttDialog} \n            refresh={refresh}\n            refreshData={refreshData}\n            setOpenStdAttDialog={setOpenStdAttDialog}\n            stdAttViewType={stdAttViewType}\n          />\n\n          <CustomDialog\n            open={dialog}\n            title={dialogMsg.split('~')[0]}\n            content={dialogMsg.split('~')[1]}\n            btnValue={dialogMsg.split('~')[2]}\n            setDialog={setDialog}\n            setIsLoading={setIsLoading}\n            setImportData={setImportData}\n          />\n          <StudentForm \n            open={stdFormOpen} \n            setOpen={setStdFormOpen} \n            selectedCourse={selectedCourse} \n            selectedBatch={selectedBatch} \n            isUser={isUser}\n            refreshData={refreshData}\n          />\n\n          {settingsOpen && <UserSettings \n            settingsOpen={settingsOpen} \n            setSettingsOpen={setSettingsOpen} \n            handleShowSnackbar={handleShowSnackbar} \n            refreshData={refreshData} />}\n\n          {openDrawer && <DashboardDrawer\n            openDrawer={openDrawer}\n            setOpenDrawer={setOpenDrawer}\n            user={isUser}\n            userCourse={userCourse}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            setDialog={setDialog}\n            setDialogMsg={setDialogMsg}\n            setStdFormOpen={setStdFormOpen}\n            setSettingsOpen={setSettingsOpen}\n            setOpenAssessment={setOpenAssessment}\n            setOpenBatchOption={setOpenBatchOption}\n            setBatchOption={setBatchOption}\n            setOpenCourseOption={setOpenCourseOption}\n            setCourseOption={setCourseOption}\n            setImportData={setImportData}\n            handleShowSnackbar={handleShowSnackbar}\n            setSendMsgToStd={setSendMsgToStd}\n            setShowSendMsg={setShowSendMsg}\n            setStudentsFeedback={setStudentsFeedback}\n            setMsgToBatch={setMsgToBatch}\n            setConfirmLogout={setConfirmLogout}\n            setPostJob={setPostJob}\n            setPostedJob={setPostedJob}\n            setUploadRecording={setUploadRecording}\n            setShowRecording={setShowRecording}\n            User={isUser}\n            setDelete_Assessment={setDelete_Assessment}\n          />}\n\n          {openBatchOption && batchOption && <BatchOptions\n            courseData={courseData}\n            openBatchOption={openBatchOption}\n            setOpenBatchOption={setOpenBatchOption}\n            batchOption={batchOption}\n            setBatchOption={setBatchOption}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n            fetch_Data={fetchData}\n            selectedCourse={selectedCourse}\n          />}\n\n          {openCourseOption && courseOption && <CourseOptions\n            openCourseOption={openCourseOption}\n            setOpenCourseOption={setOpenCourseOption}\n            courseOption={courseOption}\n            setCourseOption={setCourseOption}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n            fetchData={fetchData}\n          />}\n          {postJob && <JobAnnoucement\n            isOpen={postJob}\n            setIsOpen={setPostJob}\n            selectedCourse={selectedCourse}\n            selectBatchname={selectedBatch}\n            setIsLoading={setIsLoading}\n            handleShowSnackbar={handleShowSnackbar}\n          />}\n          {postedJobs && <ViewJobAnnouncements\n            isOpen={postedJobs}\n            setIsOpen={setPostedJob}\n            selectedCourse={selectedCourse}\n            selectBatchname={selectedBatch}\n            setIsLoading={setIsLoading}\n            handleShowSnackbar={handleShowSnackbar}\n          />}\n          <BatchAttendance\n            isOpen={openBatchAttendamceDialog}\n            setIsOpen={setOpenBatchAttendanceDialog}\n            selectedCourse={selectedCourse}\n            type={batchAttendanceType}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n            fetchBatchAttData={fetchBatchAttData}\n            studentsData={studentsData}\n            select_Batch={selectedBatch}\n          />\n          <MessageToStudents\n            isOpen={sendMsgToStd}\n            setIsOpen={setSendMsgToStd}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            User={isUser}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n          />\n          {showSendMsg && <SentMessages\n            isOpen={showSendMsg}\n            setIsOpen={setShowSendMsg}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            User={isUser}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n          />}\n          {studentsFeedback && <StudentsFeedback\n            isOpen={studentsFeedback}\n            setIsOpen={setStudentsFeedback}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n          />}\n          <SendMessagesToBatch\n            isOpen={msgToBatch}\n            setIsOpen={setMsgToBatch}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n          />\n          <UploadCodingQuestions\n            isOpen={openAssessment}\n            setIsOpen={setOpenAssessment}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n            editAssignment={editAssignment}\n            editAssignmentData={editAssignmentData}\n            setEditAssignment={setEditAssignment}\n            setEditAssignmentData={setEditAssignmentData}\n          />\n\n          {isUser !== 'Super Admin' && <AdminNotifications\n            isOpen={batchNotif}\n            setIsOpen={setBatchNotif}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n            setNotifLen={setNotifLen}\n          />}\n\n          <StudentMessages\n            isOpen={stdMessages}\n            setIsOpen={setStdMessages}\n            selectedCourse={selectedCourse}\n            selectedBatch={selectedBatch}\n            handleShowSnackbar={handleShowSnackbar}\n            setIsLoading={setIsLoading}\n            setStdMsgLen={setStdMsgLen}\n            isLoading={isLoading}\n          />\n          <UploadRecordings\n              isOpen={uploadRecording}\n              setIsOpen={setUploadRecording}\n              selectedCourse={selectedCourse}\n              selectedBatch={selectedBatch}\n              handleShowSnackbar={handleShowSnackbar}\n          />\n          {showRecording && <ShowRecordings\n              isOpen={showRecording}\n              setIsOpen={setShowRecording}\n              selectedCourse={selectedCourse}\n              selectedBatch={selectedBatch}\n              handleShowSnackbar={handleShowSnackbar}\n          />}\n          {openDrive && <Drive\n              isOpen={openDrive}\n              setIsOpen={setOpenDrive}\n              handleShowSnackbar={handleShowSnackbar}\n              setIsLoading={setIsLoading} \n          />}\n\n            <Reports\n                  isOpen={openReport}\n                  setIsOpen={setOpenReport}\n                  handleShowSnackbar={handleShowSnackbar}\n                  setIsLoading={setIsLoading} \n                  setReportLen={setReportLen}\n            />\n\n            <UpdateDeleteAssignment\n                  handleShowSnackbar={handleShowSnackbar}\n                  setIsLoading={setIsLoading}\n                  isOpen={delete_Assessment}\n                  setIsOpen={setDelete_Assessment}\n                  setOpenAssessment={setOpenAssessment}\n                  setEditAssignment={setEditAssignment}\n                  setEditAssignmentData={setEditAssignmentData}\n            />\n\n            <StudentAssignmentRequests\n                isOpen={assignmentRequests}\n                setIsOpen={setAssignmentRequests}\n                data={studentAssignmentRequests}\n                fetchAssignmentResults={fetchAssignmentResults}\n                patchAssignmentResults={patchAssignmentResults}\n                deleteAssignmentRequests={deleteAssignmentRequests}\n                fetchStudentAssignmentRequestData={fetchStudentAssignmentRequestData}\n                handleShowSnackbar={handleShowSnackbar}\n                setIsLoading={setIsLoading}\n            />\n\n            <ReportDialog isOpen={reportIssue} setIsOpen={setReportIssue} setLoading={setIsLoading} />\n\n          <Dialog open={confirmLogout} sx={{ zIndex: '710' }}>\n            <DialogTitle>Are you sure you want to logout?</DialogTitle>\n            <DialogContent>You will be redirected to the login page.</DialogContent>\n            <DialogActions>\n              <Button variant='outlined' onClick={() => setConfirmLogout(false)}>Cancel</Button>\n              <Button variant='contained' onClick={() => { handleLogout(); setConfirmLogout(false); }}>Logout</Button>\n            </DialogActions>\n          </Dialog>\n        </Suspense>\n      </Box>\n    );\n    }else if (isUserAuthenticated || is_User_Authenticated){\n      return(\n        <ExpiredPage />\n      )\n    }else{\n      navigate(`/vcube/error/${sessionStorage.getItem('UniqueURL').substring(30,70)}`);\n    }\n  }else{\n    return(\n      <LoadingSkeletonAlternate/>\n    )\n  }\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { TextField } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nconst NoSpinnerTextField = styled(TextField)(({ theme }) => ({\n  '& input[type=\"number\"]::-webkit-inner-spin-button, & input[type=\"number\"]::-webkit-outer-spin-button': {\n    WebkitAppearance: 'none',\n    margin: 0,\n  },\n  '& input[type=\"number\"]': {\n    MozAppearance: 'textfield',\n  },\n  '& .MuiInputBase-input': {\n      fontSize: '20px',\n      padding: '5px 0',\n      },\n      '& .MuiInputLabel-root': {\n      fontSize: '20px',\n    }\n}));\n\nconst NumberInput = (props) => {\n  return (\n    <NoSpinnerTextField\n        {...props}\n        type=\"number\"\n        variant=\"standard\"\n    />\n  );\n};\n\nexport default NumberInput;\n"],"names":["StyledTextField","styled","TextField","_ref","theme","fontSize","padding","props","_jsx","type","variant","UseUserAuthentication","async","checkUserAuth","setIs_User_Authenticated","user","UserDetails","dateTime","DateTime","split","is_User","isUserLogin","Username","unsubscribe","onAuthStateChanged","auth","g_user","error","UseStudentAuthentication","checkStdAuth","setIsStdAuthenticated","student","sessionStorage","getItem","isStdLogin","stdAuth","isOpen","setIsOpen","handleShowSnackbar","setIsLoading","setOpenAssessment","setEditAssignment","setEditAssignmentData","fetchAssessmentQuestions","deleteAssessmentQuestions","useContext","AssessmentContext","id","setId","useState","name","setName","option","setOption","assignment","setAssignment","delete_","setDelete_","handleClose","_Fragment","children","_jsxs","Dialog","open","sx","zIndex","src","alt","width","className","IconButton","position","onClick","CloseRounded","DialogTitle","DialogContent","Typography","color","JSON","parse","Question","Title","Box","NumberInput","value","onChange","e","target","label","InputField","FormControl","InputLabel","Select","readOnly","res","message","response","status","includes","manageAssignment","MenuItem","DialogActions","Button","margin","disabled","height","resp","data","fetchAssignmentResults","patchAssignmentResults","deleteAssignmentRequests","fetchStudentAssignmentRequestData","setStatus","submitData","setSubmitData","onClose","Array","isArray","length","map","info","index","Card","AssignmentRounded","mui_colors","Math","floor","random","Name","CancelRounded","CheckCircleRounded","DoNotDisturbAltRounded","DialogContentText","getRes","StudentId","getData","find","Course","BatchName","Date","Status","StudentProgressOverview","lazy","Search","StudentDetails","CustomDialog","LoadingSkeleton","LoadingSkeletonAlternate","StudentForm","UserSettings","DashboardDrawer","BatchOptions","CourseOptions","JobAnnoucement","ViewJobAnnouncements","UploadCodingQuestions","BatchAttendance","MessageToStudents","SentMessages","StudentsFeedback","SendMessagesToBatch","AdminNotifications","StudentMessages","UploadRecordings","ShowRecordings","ExpiredPage","Drive","Reports","Dashboard","userAuthChk","isUserAuthenticated","useAuth","removeUserLoginData","UsersAuthContext","enqueueSnackbar","closeSnackbar","useSnackbar","fetchBatchData","BatchContext","fetchCourse","CourseContext","fetchBatchAttendanceDataByCourse","BatchAttendanceContext","userGoogleLogout","UserGoogleContext","fetchAssignmentRequests","StudentsContext","navigate","useNavigate","isUser","userCourse","dialog","setDialog","stdFormOpen","setStdFormOpen","settingsOpen","setSettingsOpen","dialogMsg","setDialogMsg","isLoading","shortLoading","setShortLoading","openDrawer","setOpenDrawer","openAssessment","openBatchOption","setOpenBatchOption","batchOption","setBatchOption","openCourseOption","setOpenCourseOption","courseOption","setCourseOption","delete_Assessment","setDelete_Assessment","studentsData","setStudentsData","batchData","setBatchData","courseData","setCourseData","batchAttData","setBatchAttData","postJob","setPostJob","postedJobs","setPostedJob","selectedBatch","setSelectedBatch","selectedCourse","setSelectedCourse","importData","setImportData","confirmLogout","setConfirmLogout","batchAttendanceType","setBatchAttendanceType","openBatchAttendamceDialog","setOpenBatchAttendanceDialog","takeStdAtt","setTakeStdAtt","sendMsgToStd","setSendMsgToStd","showSendMsg","setShowSendMsg","studentsFeedback","setStudentsFeedback","msgToBatch","setMsgToBatch","batchNotif","setBatchNotif","notifLen","setNotifLen","stdMessages","setStdMessages","stdMsgLen","setStdMsgLen","uploadRecording","setUploadRecording","showRecording","setShowRecording","openStdAttDialog","setOpenStdAttDialog","is_User_Authenticated","openDrive","setOpenDrive","openReport","setOpenReport","reportLen","setReportLen","editAssignment","editAssignmentData","reportIssue","setReportIssue","refresh","setRefresh","isAuthChecked","setIsAuthChecked","stdAttViewType","setStdAttViewType","assignmentRequests","setAssignmentRequests","studentAssignmentRequests","setstudentAssignmentRequests","useCallback","anchorOrigin","vertical","horizontal","action","key","Check_Auth","useEffect","setTimeout","fetchData","batch_data","course_Data","fetchBatchAttData","filter","refreshData","boxShadow","HomeRounded","marginRight","Tooltip","title","arrow","MenuRounded","CloudRounded","Badge","badgeContent","max","ThreePRounded","ReportRounded","ReportProblemRounded","substring","FlipCameraAndroidRounded","NotificationsRounded","AssignmentLateRounded","Suspense","fallback","content","btnValue","setOpen","User","fetch_Data","selectBatchname","select_Batch","UpdateDeleteAssignment","StudentAssignmentRequests","ReportDialog","setLoading","NoSpinnerTextField","WebkitAppearance","MozAppearance"],"sourceRoot":""}