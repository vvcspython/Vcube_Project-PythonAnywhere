{"version":3,"file":"static/js/7212.d5d24158.chunk.js","mappings":"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","sources":["components/api/LoginCheck.js","components/student-info/Index.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { stdAuth } from './StudentsFirebase';\nimport { auth } from './UsersFirebase';\nimport { is_User, isStdLogin, isUserLogin, UserDetails } from \"../UserDetails\";\nimport { DateTime } from \"../date-time\";\n\nexport const UseUserAuthentication = async (checkUserAuth, setIs_User_Authenticated) => {\n    try {\n        const user = UserDetails('All');\n        const dateTime = DateTime().split(' ');\n        if (user && is_User() !== 'Student' &&\n            isUserLogin() === (`True -> ${user.Username} -> ${dateTime[0]}`) &&\n            await checkUserAuth() === true) {\n\n            const unsubscribe = onAuthStateChanged(auth, (g_user) => {\n                setIs_User_Authenticated(!!g_user);\n            });\n\n            return () => {\n                unsubscribe();\n            };\n        } else {\n            setIs_User_Authenticated(false);\n        }\n    } catch (error) {\n        setIs_User_Authenticated(false);\n    }\n};\n\nexport const UseStudentAuthentication = async (checkStdAuth, setIsStdAuthenticated) => {\n    const student = sessionStorage.getItem('StudentDetails_ID');\n    const dateTime = DateTime().split(' ');\n    try {\n        if (student && is_User() === 'Student' &&\n        isStdLogin() === (`True -> ${student} -> ${dateTime[0]}`) &&\n        await checkStdAuth() === true) {\n\n            const unsubscribe = onAuthStateChanged(stdAuth, (g_user) => {\n                setIsStdAuthenticated(!!g_user);\n            });\n\n            return () => unsubscribe();\n        } else {\n            setIsStdAuthenticated(false);\n        }\n    } catch (error) {\n        setIsStdAuthenticated(false);\n    }\n};\n","import React, { useContext, useEffect, useState, useCallback, lazy, Suspense, startTransition, memo } from 'react';\nimport { Box, Card, IconButton, Tooltip, Badge, SpeedDial, SpeedDialIcon, SpeedDialAction, Link, Dialog, DialogContent, DialogContentText, DialogTitle, DialogActions, Button, Typography } from '@mui/material';\nimport { MenuRounded, Notifications, Edit, Close, SimCardDownloadRounded, LogoutRounded, CloseRounded, MailRounded, SmsRounded, ContentPasteRounded, ThumbUpAltRounded, CodeRounded, SmartDisplayRounded, ReportProblemRounded, RefreshRounded, LeaderboardRounded } from '@mui/icons-material';\nimport { useNavigate } from 'react-router-dom';\nimport { StudentsContext } from '../api/students';\nimport { BatchAttendanceContext } from '../api/batch-attendance';\nimport { useSnackbar } from 'notistack';\nimport { useStudentAuth } from '../api/StudentAuthContext';\nimport { is_User } from '../UserDetails';\nimport { LoginContext } from '../api/login';\nimport { UseStudentAuthentication, UseUserAuthentication } from '../api/LoginCheck';\nimport { useAuth } from '../api/AuthContext';\nimport { UsersAuthContext } from '../api/UsersAuth';\nimport { StudentsAuthContext } from '../api/StudentsAuth';\n\nconst CustomTabs = lazy(()=> import('./Tabs'));\nconst PersonalInfo = lazy(() => import('./PersonalInfo'));\nconst AttendanceINsights = lazy(() => import('./AttendanceINsights'));\nconst Performance = lazy(() => import('./Performance'));\nconst EducationInfo = lazy(() => import('./EducationInfo'));\nconst PlacementsInfo = lazy(() => import('./PlacementsInfo'));\nconst StudentDetailsEditForm = lazy(() => import('./Student-Form'));\nconst SendMessageForm = lazy(() => import('./SendMessageForm'));\nconst SentMessagesForm = lazy(() => import('./SentMessagesForm'));\nconst LoadingSkeleton = lazy(() => import('../skeleton'));\nconst LoadingSkeletonAlternate = lazy(()=> import('../LoadingSkeletonAlternate'));\nconst FeedbackForm = lazy(() => import('./FeedbackForm'));\nconst AssessmentsData = lazy(() => import('./AssessmentsData'));\nconst StudentNotifications = lazy(() => import('./StudentNotifications'));\nconst PlacementNotifications = lazy(() => import('./PlacementNotifications'));\nconst AssessmentCodeEditor = lazy(() => import('./AssessmentCodeEditor'));\nconst PracticeCodeEditor = lazy(()=> import('./PracticeCodeEditor'));\nconst ClassVedios = lazy(()=> import('./ClassVedios'));\nconst ExpiredPage = lazy(()=> import('../ExpiredPage'));\nconst ReportDialog = lazy(()=> import('../ReportDialog'));\nconst LeaderboardResults = lazy(()=> import('./LeaderboardResults'));\n\nconst MemoizedIconButton = memo(IconButton);\n\nconst StudentInfo = () => {\n  const { fetchStudentsDataById, getStudentAttendanceById, fetchStudentWatchTimeData, postStudentWatchTimeData, patchStudentWatchTimeData } = useContext(StudentsContext);\n  const { fetchBatchAttendanceDataByCourse } = useContext(BatchAttendanceContext);\n  const { checkUserAuth } = useContext(UsersAuthContext);\n  const { checkStdAuth } = useContext(StudentsAuthContext);\n  const { fetchPermissionsData } = useContext(LoginContext);\n  const { studentAuthChk, removeStudentLoginData, isStudentAuthenticated } = useStudentAuth();\n  const { isUserAuthenticated, isPlacementsAuthenticated } = useAuth();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const navigate = useNavigate();\n  const isUser = is_User();\n  const [tabsValue, setTabValue] = useState(0);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [stdPermission, setStdPermission] = useState({});\n  const stdId = JSON.parse(sessionStorage.getItem('StudentDetails_ID'));\n  const [studentData, setStudentData] = useState({\n    personal: [],\n    placement: [],\n    education: [],\n    status: '',\n    access: '',\n    config : '',\n    joiningDate : ''\n  });\n  const [batchAttendanceData, setBatchAttendanceData] = useState([]);\n  const [stdAttendanceData, setStdAttendanceData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [dialogState, setDialogState] = useState({\n    messageForm: false,\n    sentMessageForm: false,\n    isLogout: false,\n    feedbackForm: false,\n    assessmentDialog: false,\n    stdNotifications: false,\n    stdMailNotifications: false,\n    solveAssessment: false,\n    practice_CodeEditor: false,\n    classVedio: false,\n    leaderboard: false,\n  });\n  const [notifLen, setNotifLen] = useState(0);\n  const [mailNotif, setMailNotif] = useState(0);\n  const [solveAssessmentData, setSolveAssessmentData] = useState(null);\n  const [editDetails, setEditDetails] = useState(false);\n  const [is_User_Authenticated, setIs_User_Authenticated] = useState(false);\n  const [isStdAuthenticated, setIsStdAuthenticated] = useState(false);\n  const [reportIssue, setReportIssue] = useState(false);\n  const [isAuthChecked, setIsAuthChecked] = useState(false);\n  const [refreshed, setRefreshed] = useState(false);\n  const [timer, setTimer] = useState(30);\n\n  const Check_Auth = async () => {\n    await UseUserAuthentication(checkUserAuth, setIs_User_Authenticated);\n    await UseStudentAuthentication(checkStdAuth, setIsStdAuthenticated);\n    !isAuthChecked && setIsAuthChecked(true);\n  }\n\n  const handleShowSnackbar = useCallback((variant, message) => {\n    enqueueSnackbar(message, {\n      variant,\n      anchorOrigin: { vertical: 'top', horizontal: 'right' },\n      action: (key) => (\n        <IconButton><CloseRounded onClick={() => closeSnackbar(key)} color=\"inherit\" /></IconButton>\n      )\n    });\n  }, [enqueueSnackbar, closeSnackbar]);\n\n  const is_Assignment = () => {\n    if(sessionStorage.getItem('Reloaded_In_Assignment') === 'True'){\n      setTimeout(()=>{\n        setSolveAssessmentData(JSON.parse(sessionStorage.getItem('Reloaded_Assignment_Data')));\n        setDialogState(pre => ({ ...pre, solveAssessment: true }));\n      },500)\n    };\n  }\n\n  useEffect(() => {\n    startTransition(()=>{\n      if (isLoading) {\n        setTimeout(() => {\n          setIsLoading(false);\n        }, 3000);\n      }\n    })\n    Check_Auth();\n    is_Assignment();\n  }, []);\n\n  const fetchData = useCallback(async () => {\n    startTransition(async()=>{\n    try {\n      const res = await fetchStudentsDataById(stdId);\n      const stdResult = await getStudentAttendanceById(stdId);\n      if (res && res.message) {\n        handleShowSnackbar('error', res.message);\n        handleClose();\n        return;\n      }\n      const batchResult = await fetchBatchAttendanceDataByCourse(res[0].Course);\n      setStudentData({\n        personal: JSON.parse(res[0].Personal_Info),\n        education: typeof res[0].Educational_Info === 'object' ? 'N/A' : JSON.parse(res[0].Educational_Info),\n        placement: typeof res[0].Placement_Info === 'object' ? 'N/A' : JSON.parse(res[0].Placement_Info),\n        status: res[0].Status,\n        access: res[0].Permission,\n        config : res[0].Student_Config,\n        joiningDate : res[0].Joining_Date || 'N/A'\n      });\n      if (batchResult.message === 'Network Error' || stdResult.message === 'Network Error') {\n        handleShowSnackbar('error', 'Network Error');\n      } else {\n        setBatchAttendanceData(batchResult.filter(data => data.BatchName === studentData.personal.BatchName));\n        setStdAttendanceData(stdResult);\n      }\n    } catch (error) {\n      handleShowSnackbar('error', 'Something went wrong. Please try again later.');\n    }\n    })\n  }, [fetchStudentsDataById, getStudentAttendanceById, fetchBatchAttendanceDataByCourse, handleShowSnackbar, studentData.personal.BatchName, stdId]);\n\n  const fetchPermission = async () => {\n    const res = await fetchPermissionsData(studentData.personal.Course);\n    if (res && res.message){\n      handleShowSnackbar('error',res.message);\n    }else if(res){\n      const data = res.find(data=>data.BatchName === studentData.personal.BatchName);\n      data && setStdPermission({\n        Edit : data.Edit_Access,\n        Login : data.Login_Access\n      })\n    }\n  }\n\n  useEffect(() => {\n    startTransition(() => {\n      stdId ? fetchData() : handleClose();\n      fetchPermission();\n    });\n  }, [tabsValue, fetchData]);\n\n  const handleClose = () => {\n    startTransition(() => {\n      setIsLoading(true);\n      setTimeout(() => {\n        const uniqueURL = sessionStorage.getItem('UniqueURL');\n        if (isUser === 'Student' && isStdAuthenticated && isStdAuthenticated) {\n          removeStudentLoginData();\n          studentAuthChk();\n        }else if(isUser === 'Super Admin' && isUserAuthenticated && is_User_Authenticated && isPlacementsAuthenticated && is_User_Authenticated){\n          sessionStorage.getItem('Navigate') === 'Placements' ? \n            navigate(`/vcube/placements/dashboard/${uniqueURL.substring(30,60)}`) :\n            navigate(`/vcube/dashboard/${uniqueURL.substring(0,30)}`);\n          sessionStorage.setItem('Navigate','');\n        } else if (isUserAuthenticated && is_User_Authenticated) {\n          navigate(`/vcube/dashboard/${uniqueURL.substring(0,30)}`);\n        }else if(isPlacementsAuthenticated && is_User_Authenticated){\n          navigate(`/vcube/placements/dashboard/${uniqueURL.substring(30,60)}`);\n        }else{\n          navigate(`/vcube/error/${uniqueURL.substring(30,70)}`);\n        }\n      }, 1000);\n    });    \n  };\n\n  const refreshData = async () => {\n    setIsLoading(true);\n    await fetchData();\n    await fetchPermission();\n    await Check_Auth();\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    let timerId;\n  \n    if (refreshed) {\n      timerId = setTimeout(() => {\n        setTimer((prev) => prev - 1);\n      }, 1000);              \n    }\n\n    if (timer === 0) {\n      setRefreshed(false);\n      setTimer(30);\n    }\n  \n    return () => clearTimeout(timerId);\n  }, [timer, refreshed]);\n\n  const saveWatchTime = async () => {\n    if(isUser === 'Student' && dialogState.classVedio){\n      const time = localStorage.getItem('Student_WatchTime');\n      if(time){\n        if (Math.floor(parseInt(time.split('~')[1]) / 60) < 1) {\n            return;\n        }\n        const getData = await fetchStudentWatchTimeData(stdId);\n\n        if (!getData || getData.message || getData.response) {\n            return false;\n        }\n\n        const existingData = Array.isArray(getData) && getData.find((data) =>\n            data.Course === studentData.personal.Course &&\n            data.BatchName === studentData.personal.BatchName &&\n            data.Name === `${studentData.personal.Name}~${studentData.personal.Phone}` &&\n            data.Date === time.split('~')[0]\n        );\n\n        if (existingData) {\n            existingData.WatchTime = (parseInt(existingData.WatchTime) || 0) + parseInt(time.split('~')[1]);\n            const res_1 = await patchStudentWatchTimeData(existingData);\n            if (res_1) {\n                localStorage.removeItem('Student_WatchTime');\n            }\n        } else {\n            const newData = {\n                StudentId: stdId,\n                Name: `${studentData.personal.Name}~${studentData.personal.Phone}`,\n                Course: studentData.personal.Course,\n                BatchName: studentData.personal.BatchName,\n                Date: time.split('~')[0],\n                WatchTime: time.split('~')[1],\n            };\n            const res_2 = await postStudentWatchTimeData(newData);\n            if (res_2) {\n                localStorage.removeItem('Student_WatchTime');\n            }\n        }\n      }\n    }\n  };\n\n  useEffect(()=>{\n    if(isUser === 'Student' && localStorage.getItem('Student_WatchTime') && !dialogState.classVedio){\n      saveWatchTime();\n    }\n  },[])\n\n  const actions = [\n    (isUser !== 'Student' || (isUser === 'Student' && stdPermission.Edit === 'Access')) && isUser.split(' ')[0] !== 'Placements' &&\n    { icon: <Edit />, name: 'Edit Details', onClick: () => {setDialogState(prev => ({ ...prev, editStdDetails: true }));setEditDetails(true)} },\n    { icon: <Link href={studentData.personal.Resume} download={`VCube-${studentData.personal.Name}-${studentData.personal.Course}-${studentData.personal.BatchName}.pdf`} ><SimCardDownloadRounded /></Link>, name: 'Download Resume' },\n    isUser.split(' ')[0] !== 'Placements'  && { icon: <ContentPasteRounded />, name: 'Assignments', onClick: () => setDialogState(prev => ({ ...prev, assessmentDialog: true })) },\n    { icon: <CodeRounded />, name: 'Code Editor', onClick: () => setDialogState(pre => ({ ...pre, practice_CodeEditor: true })) },\n    isUser === 'Student' && { icon: <SmartDisplayRounded />, name: 'Class Recordings', onClick: ()=> setDialogState(pre => ({ ...pre, classVedio: true })) },\n    { icon: <SmsRounded />, name: 'Messages you sent', onClick: () => setDialogState(prev => ({ ...prev, sentMessageForm: true })) },\n    { icon: <ThumbUpAltRounded />, name: 'Feedback Form', onClick: () => setDialogState(prev => ({ ...prev, feedbackForm: true })) },\n    { icon: <LogoutRounded />, name: isUser === 'Student' ? 'Logout' : 'Close Details', onClick: isUser === 'Student' ? () => setDialogState(prev => ({ ...prev, isLogout: true })) : handleClose }\n  ].filter(Boolean);\n\n  if(isAuthChecked){\n  if((is_User_Authenticated && (isUserAuthenticated || isPlacementsAuthenticated)) || (isStdAuthenticated && isStudentAuthenticated)){\n    return (\n      <Box className=\"bg-slate-100 w-screen h-screen\">\n        <Suspense fallback={<LoadingSkeletonAlternate />}>\n          <CustomTabs tabsValue={tabsValue} setTabValue={setTabValue} />\n          <Card className='w-[95%] h-[85%] ml-[2.5%] relative'>\n            <img src=\"/images/V-Cube-Logo.png\" alt='' className='w-[10%] ml-[45%]' />\n            {tabsValue === 0 ? (\n              <PersonalInfo\n                user={isUser}\n                stdId={stdId}\n                student_Details={studentData.personal}\n                location={studentData.placement.Location}\n                access={studentData.access}\n                status={studentData.status}\n                handleShowSnackbar={handleShowSnackbar}\n                setMessageForm={(open) => setDialogState(pre => ({ ...pre, messageForm: open }))}\n                fetchStdData={fetchData}\n                handleClose={handleClose}\n                JoiningDate={studentData.joiningDate}\n                fetchData={fetchData}\n              />\n            ) : tabsValue === 1 ? (\n              <AttendanceINsights\n                batchAttendanceData={batchAttendanceData}\n                stdAttendanceData={stdAttendanceData}\n                selectedYear={selectedYear}\n                setSelectedYear={setSelectedYear}\n                JoiningDate={studentData.joiningDate}\n                handleShowSnackbar={handleShowSnackbar}\n                stdId={stdId}\n                name={studentData.personal.Name}\n                phone={studentData.personal.Phone}\n              />\n            ) : tabsValue === 2 ? (\n              <Performance\n                batchAttendanceData={batchAttendanceData}\n                stdAttendanceData={stdAttendanceData}\n                name={studentData.personal.Name} \n                email={studentData.personal.Email}\n                setIsLoading={setIsLoading}\n                handleShowSnackbar={handleShowSnackbar}\n                isUser={isUser}\n                stdId={stdId}\n                phone={studentData.personal.Phone}\n              />\n            ) : tabsValue === 3 ? (\n              <EducationInfo student_Details={studentData.education} />\n            ) : (\n              <PlacementsInfo student_Details={studentData.placement} />\n            )}\n            {isUser === 'Student' && (\n              <>\n                <MemoizedIconButton sx={{ position: 'absolute', top: '2%', left: '1%' }} onClick={() => setDialogState(prev => ({ ...prev, stdNotifications: true }))}>\n                  <Tooltip title=\"Your Notifications\" arrow><Badge badgeContent={notifLen} color='error' max={99}><Notifications className='text-gray-500 cursor-pointer' sx={{ fontSize: '30px' }} /></Badge></Tooltip>\n                </MemoizedIconButton>\n                <MemoizedIconButton sx={{ position: 'absolute', top: '2%', left: '5%' }} onClick={() => setDialogState(prev => ({ ...prev, stdMailNotifications: true }))}>\n                  <Tooltip title='Placements Notifications' arrow><Badge badgeContent={mailNotif} color='error' max={99}><MailRounded className='text-gray-500 cursor-pointer' sx={{ fontSize: '30px' }} /></Badge></Tooltip>\n                </MemoizedIconButton>\n                <MemoizedIconButton sx={{ position: 'absolute', top: '2%', left: '9%' }} onClick={()=>setReportIssue(true)} >\n                  <Tooltip title='Report an Issue' arrow><ReportProblemRounded className='text-gray-500 cursor-pointer' sx={{ fontSize: '30px' }} /></Tooltip>\n                </MemoizedIconButton>\n              </>\n            )}\n\n            <MemoizedIconButton sx={{ position: 'absolute', top: '2%', left: isUser === 'Student' ? '12.8%' : '1%' }}  onClick={() => setDialogState(prev => ({ ...prev, leaderboard: true }))}>\n              <Tooltip title='Leaderboard' arrow>\n                <LeaderboardRounded  sx={{ fontSize: '30px' }} />\n              </Tooltip>\n            </MemoizedIconButton>\n\n            <MemoizedIconButton sx={{ position: 'absolute', top: '2%', left: isUser === 'Student' ? '16.3%' : '5%' }} onClick={()=>{!refreshed && refreshData();setRefreshed(true)}}>\n              <Tooltip title={`Refresh ${refreshed ? timer < 10 ? `in 0${timer}` : `in ${timer}` : ''}`} arrow>\n                <RefreshRounded  sx={{ fontSize: '30px' }} />\n              </Tooltip>\n            </MemoizedIconButton>\n\n            <SpeedDial\n              ariaLabel=\"Menu SpeedDial\"\n              onClick={fetchPermission}\n              sx={{\n                bgcolor: 'transparent',\n                position: 'absolute',\n                right: '10px',\n                top: '10px',\n                zIndex: '100',\n                '& .MuiSpeedDial-fab': {\n                  boxShadow: 'none',\n                  bgcolor: 'transparent',\n                  color: 'black',\n                  '&:hover': {\n                    bgcolor: 'grey.300',\n                  },\n                },\n              }}\n              icon={<SpeedDialIcon icon={<MenuRounded sx={{ fontSize: '30px' }} className='text-gray-500' />} openIcon={<Close sx={{ fontSize: '30px' }} className='text-gray-500' />} />}\n              direction='left'\n            >\n              {actions.map((action) => (\n                <SpeedDialAction\n                  key={action.name}\n                  icon={action.icon}\n                  tooltipTitle={action.name}\n                  onClick={action.onClick}\n                  arrow\n                />\n              ))}\n            </SpeedDial>\n          </Card>\n          {isLoading && <LoadingSkeleton />}\n          {dialogState.editStdDetails && <StudentDetailsEditForm \n                isOpen={dialogState.editStdDetails} \n                setIsOpen={(open) => setDialogState(prev => ({ ...prev, editStdDetails: open }))} \n                student_Personal_Details={studentData.personal} \n                student_Education_Details={studentData.education} \n                student_Placement_Details={studentData.placement} \n                selectedCourse={studentData.personal.Course}\n                user={isUser}\n                editDetails={editDetails}\n                joiningDate={studentData.joiningDate} \n                refreshData={refreshData} />}\n          {dialogState.messageForm && <SendMessageForm \n                isOpen={dialogState.messageForm} \n                setIsopen={(open) => setDialogState(prev => ({ ...prev, messageForm: open }))} \n                course={studentData.personal.Course} \n                batchName={studentData.personal.BatchName} \n                image={studentData.personal.Image} \n                name={studentData.personal.Name} \n                phone={studentData.personal.Phone} \n                email={studentData.personal.Email}\n                handleShowSnackbar={handleShowSnackbar} \n                setIsLoading={setIsLoading} \n                isUser={isUser} \n                stdId={stdId} />}\n          {dialogState.sentMessageForm && <SentMessagesForm \n                isOpen={dialogState.sentMessageForm} \n                setIsOpen={(open) => setDialogState(prev => ({ ...prev, sentMessageForm: open }))} \n                image={studentData.personal.Image} \n                gender={studentData.personal.Gender} \n                course={studentData.personal.Course} \n                batchName={studentData.personal.BatchName} \n                name={studentData.personal.Name} \n                phone={studentData.personal.Phone} \n                handleShowSnackbar={handleShowSnackbar} \n                setIsLoading={setIsLoading}\n                isUser={isUser} \n                stdId={stdId} />}\n          <FeedbackForm \n            isOpen={dialogState.feedbackForm} \n            setIsOpen={(open) => setDialogState(prev => ({ ...prev, feedbackForm: open }))} \n            course={studentData.personal.Course} \n            batchName={studentData.personal.BatchName} \n            handleShowSnackbar={handleShowSnackbar} \n            setIsLoading={setIsLoading} \n            isUser={isUser}\n          />\n          {dialogState.assessmentDialog && <AssessmentsData \n                isOpen={dialogState.assessmentDialog} \n                setIsOpen={(open) => setDialogState(prev => ({ ...prev, assessmentDialog: open }))} \n                course={studentData.personal.Course} \n                batchName={studentData.personal.BatchName} \n                handleShowSnackbar={handleShowSnackbar} \n                setIsLoading={setIsLoading} \n                setSolveAssessmentData={setSolveAssessmentData}\n                setSolveAssesments={(open) => setDialogState(pre => ({ ...pre, solveAssessment: open }))} \n                stdId={stdId}\n                JoiningDate={studentData.joiningDate}\n                isUser={isUser}\n                configs={studentData.config}\n                image={studentData.personal.Image}\n                name={studentData.personal.Name}\n                phone={studentData.personal.Phone}\n          />}\n          {dialogState.stdNotifications && <StudentNotifications \n                isOpen={dialogState.stdNotifications} \n                setIsOpen={(open) => setDialogState(prev => ({ ...prev, stdNotifications: open }))} \n                course={studentData.personal.Course} \n                batchName={studentData.personal.BatchName} \n                handleShowSnackbar={handleShowSnackbar} \n                setNotifLen={setNotifLen} \n                stdId={stdId} \n                isLoading={isLoading}\n          />}\n          {dialogState.stdMailNotifications && <PlacementNotifications \n                isOpen={dialogState.stdMailNotifications} \n                setIsOpen={(open) => setDialogState(prev => ({ ...prev, stdMailNotifications: open }))} \n                course={studentData.personal.Course} \n                batchName={studentData.personal.BatchName} \n                handleShowSnackbar={handleShowSnackbar} \n                setMailNotif={setMailNotif} \n                isLoading={isLoading} \n          />}\n          {dialogState.solveAssessment && \n          <AssessmentCodeEditor \n                isOpen={dialogState.solveAssessment} \n                setIsOpen={(open) => setDialogState(pre => ({ ...pre, solveAssessment: open }))} \n                stdId={stdId} \n                handleShowSnackbar={handleShowSnackbar} \n                solveAssessmentData={solveAssessmentData}\n                name={studentData.personal.Name} \n                phone={studentData.personal.Phone}\n                course={studentData.personal.Course}\n                batchName={studentData.personal.BatchName}\n                isUser={isUser}\n          />}\n          {dialogState.practice_CodeEditor && <PracticeCodeEditor \n                isOpen={dialogState.practice_CodeEditor} \n                setIsOpen={(open) => setDialogState(pre => ({ ...pre, practice_CodeEditor: open }))} \n                handleShowSnackbar={handleShowSnackbar} \n                configs={studentData.config}\n                fetchStdData={fetchData}\n                stdId={stdId}\n                isUser={isUser}\n          />}\n          {dialogState.classVedio && <ClassVedios \n                isOpen={dialogState.classVedio} \n                setIsOpen={(open) => setDialogState(pre => ({ ...pre, classVedio: open }))} \n                JoiningDate={`${studentData.joiningDate.split('-')[1]}-${studentData.joiningDate.split('-')[2]}`}\n                course={studentData.personal.Course}\n                batchName={studentData.personal.BatchName}\n                handleShowSnackbar={handleShowSnackbar}\n                stdId={stdId}\n                name={studentData.personal.Name}\n                phone={studentData.personal.Phone}\n                isUser={isUser}\n                setIsLoading={setIsLoading}\n          />}\n\n          <ReportDialog isOpen={reportIssue} setIsOpen={setReportIssue} setLoading={setIsLoading} />\n          \n          <LeaderboardResults \n              isOpen={dialogState.leaderboard}\n              setIsOpen={(open)=> setDialogState((pre)=> ({...pre, leaderboard: open}))}\n              stdId={stdId}\n              name={studentData.personal.Name}\n              phone={studentData.personal.Phone}\n              course={studentData.personal.Course}\n              batchName={studentData.personal.BatchName}\n              handleShowSnackbar={handleShowSnackbar}\n              setIsLoading={setIsLoading}\n              batchAttendanceData={batchAttendanceData}\n          />\n\n          {dialogState.isLogout && <Dialog open={dialogState.isLogout} onClose={() => setDialogState(prev => ({ ...prev, isLogout: false }))}>\n            <DialogTitle>Are you sure you want to Logout?</DialogTitle>\n            <DialogContent>\n              <DialogContentText>This will redirect you to the Login Page.</DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button variant='outlined' onClick={() => setDialogState(prev => ({ ...prev, isLogout: false }))}>Cancel</Button>\n              <Button variant='contained' onClick={() => { handleClose(); setDialogState(prev => ({ ...prev, isLogout: false })); }}>Logout</Button>\n            </DialogActions>\n          </Dialog>}\n        </Suspense>\n      </Box>\n    );\n  }else if (is_User_Authenticated || isUserAuthenticated || isPlacementsAuthenticated || isStdAuthenticated || isStudentAuthenticated){\n    return (\n      <ExpiredPage/>\n    );\n  }else{\n    navigate(`/vcube/error/${sessionStorage.getItem('UniqueURL').substring(30,70)}`);\n  }\n  }else{\n    <LoadingSkeletonAlternate/>\n  }\n};\n\nexport default StudentInfo;\n"],"names":["UseUserAuthentication","async","checkUserAuth","setIs_User_Authenticated","user","UserDetails","dateTime","DateTime","split","is_User","isUserLogin","Username","unsubscribe","onAuthStateChanged","auth","g_user","error","UseStudentAuthentication","checkStdAuth","setIsStdAuthenticated","student","sessionStorage","getItem","isStdLogin","stdAuth","CustomTabs","lazy","PersonalInfo","AttendanceINsights","Performance","EducationInfo","PlacementsInfo","StudentDetailsEditForm","SendMessageForm","SentMessagesForm","LoadingSkeleton","LoadingSkeletonAlternate","FeedbackForm","AssessmentsData","StudentNotifications","PlacementNotifications","AssessmentCodeEditor","PracticeCodeEditor","ClassVedios","ExpiredPage","ReportDialog","LeaderboardResults","MemoizedIconButton","memo","IconButton","StudentInfo","fetchStudentsDataById","getStudentAttendanceById","fetchStudentWatchTimeData","postStudentWatchTimeData","patchStudentWatchTimeData","useContext","StudentsContext","fetchBatchAttendanceDataByCourse","BatchAttendanceContext","UsersAuthContext","StudentsAuthContext","fetchPermissionsData","LoginContext","studentAuthChk","removeStudentLoginData","isStudentAuthenticated","useStudentAuth","isUserAuthenticated","isPlacementsAuthenticated","useAuth","enqueueSnackbar","closeSnackbar","useSnackbar","navigate","useNavigate","isUser","tabsValue","setTabValue","useState","selectedYear","setSelectedYear","stdPermission","setStdPermission","stdId","JSON","parse","studentData","setStudentData","personal","placement","education","status","access","config","joiningDate","batchAttendanceData","setBatchAttendanceData","stdAttendanceData","setStdAttendanceData","isLoading","setIsLoading","dialogState","setDialogState","messageForm","sentMessageForm","isLogout","feedbackForm","assessmentDialog","stdNotifications","stdMailNotifications","solveAssessment","practice_CodeEditor","classVedio","leaderboard","notifLen","setNotifLen","mailNotif","setMailNotif","solveAssessmentData","setSolveAssessmentData","editDetails","setEditDetails","is_User_Authenticated","isStdAuthenticated","reportIssue","setReportIssue","isAuthChecked","setIsAuthChecked","refreshed","setRefreshed","timer","setTimer","Check_Auth","handleShowSnackbar","useCallback","variant","message","anchorOrigin","vertical","horizontal","action","key","_jsx","children","CloseRounded","onClick","color","useEffect","startTransition","setTimeout","pre","fetchData","res","stdResult","handleClose","batchResult","Course","Personal_Info","Educational_Info","Placement_Info","Status","Permission","Student_Config","Joining_Date","filter","data","BatchName","fetchPermission","find","Edit","Edit_Access","Login","Login_Access","uniqueURL","substring","setItem","refreshData","timerId","prev","clearTimeout","localStorage","time","Math","floor","parseInt","getData","response","existingData","Array","isArray","Name","Phone","Date","WatchTime","removeItem","newData","StudentId","saveWatchTime","actions","icon","name","editStdDetails","Link","href","Resume","download","SimCardDownloadRounded","ContentPasteRounded","CodeRounded","SmartDisplayRounded","SmsRounded","ThumbUpAltRounded","LogoutRounded","Boolean","Box","className","_jsxs","Suspense","fallback","Card","src","alt","student_Details","location","Location","setMessageForm","open","fetchStdData","JoiningDate","phone","email","Email","_Fragment","sx","position","top","left","Tooltip","title","arrow","Badge","badgeContent","max","Notifications","fontSize","MailRounded","ReportProblemRounded","LeaderboardRounded","RefreshRounded","SpeedDial","ariaLabel","bgcolor","right","zIndex","boxShadow","SpeedDialIcon","MenuRounded","openIcon","Close","direction","map","SpeedDialAction","tooltipTitle","isOpen","setIsOpen","student_Personal_Details","student_Education_Details","student_Placement_Details","selectedCourse","setIsopen","course","batchName","image","Image","gender","Gender","setSolveAssesments","configs","setLoading","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button"],"sourceRoot":""}